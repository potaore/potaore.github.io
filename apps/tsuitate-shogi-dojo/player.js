// Generated by CoffeeScript 1.7.1
(function() {
  var Board, BordCanvas, Game, KifuPlayer, Koma, KomaType, KomadaiCanvas, MoveConvertor, Node, Socket, computeDuration, domFinder, game, getimage, images2, km1, km2, komaTypes, listenlist, moveConvertor, node, util,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  listenlist = {
    "VVVV": true
  };

  Socket = (function() {
    function Socket(nodeApi, params) {
      var id;
      this.nodeApi = nodeApi;
      this.params = params;
      this.id = id = uuid();
      this.events = {};
      this.broadcast = this.nodeApi.g$emitter(function(socket) {
        return socket.id !== id;
      });
      id = null;
    }

    Socket.prototype.on = function(name, func) {
      return this.events[name] = func;
    };

    Socket.prototype.fire = function(name, arg, cont) {
      var ret;
      if (this.events[name]) {
        ret = this.events[name](arg);
        return typeof cont === "function" ? cont(ret) : void 0;
      }
    };

    Socket.prototype.to = function(id) {
      return this.nodeApi.g$emitter(function(socket) {
        return socket.id === id;
      });
    };

    return Socket;

  })();

  Node = (function() {
    function Node() {
      this.sockets = {};
    }

    Node.prototype.connect = function(params, cont) {
      var socket;
      socket = new Socket(this, params);
      this.sockets[socket.id] = socket;
      return cont(socket);
    };

    Node.prototype.g$emitter = function(socketGuard) {
      return {
        emit: (function(_this) {
          return function(name, arg, cont) {
            if (listenlist[name]) {
              console.log("emit : " + name);
              console.log(arg);
              console.log(cont);
            }
            return _(_(_(_this.sockets).values()).filter(socketGuard)).each(function(socket) {
              var result;
              return result = socket.fire(name, arg, cont);
            });
          };
        })(this)
      };
    };

    Node.prototype.emit = function(name, arg, cont) {
      if (listenlist[name]) {
        console.log("emit : " + name);
        console.log(arg);
        console.log(cont);
      }
      return _(_(this.sockets).values()).each(function(socket) {
        var result;
        return result = socket.fire(name, arg, cont);
      });
    };

    return Node;

  })();

  node = new Node();

  _global.node = node;

  util = {
    isVacant: function(val) {
      return val === null || val === void 0 || val === "" || val === 0;
    },
    isntVacant: function(val) {
      return val !== null && val !== void 0 && val !== "" && val !== 0;
    },
    reverseVector: function(position, playerNumber) {
      if (playerNumber === 1) {
        return position;
      }
      return {
        x: position.x * -1,
        y: position.y * -1,
        length: position.length
      };
    },
    posEq: function(p1, p2) {
      return p1.x === p2.x && p1.y === p2.y;
    },
    posAdd: function(p, v) {
      return {
        x: p.x + v.x,
        y: p.y + v.y,
        length: v.length
      };
    },
    posMul: function(p, times) {
      return {
        x: p.x * times,
        y: p.y * times,
        length: times
      };
    },
    posDup: function(p) {
      return {
        x: p.x,
        y: p.y,
        length: p.length
      };
    },
    posAdd1: function(p) {
      return {
        x: p.x + 1,
        y: p.y + 1,
        length: p.length
      };
    },
    posFlip: function(p, flip) {
      if (flip) {
        return {
          x: 8 - p.x,
          y: 8 - p.y
        };
      } else {
        return {
          x: p.x,
          y: p.y
        };
      }
    },
    posFlipX: function(p) {
      return {
        x: 8 - p.x,
        y: p.y
      };
    },
    posToStr: function(p) {
      return p.x + ":" + p.y;
    },
    isInRange: function(pos) {
      return 0 <= pos.x && pos.x < 9 && 0 <= pos.y && pos.y < 9;
    },
    allPos: function(predicate) {
      var x, y, _i, _results;
      _results = [];
      for (y = _i = 0; _i < 9; y = ++_i) {
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (x = _j = 0; _j < 9; x = ++_j) {
            _results1.push(predicate(x, y));
          }
          return _results1;
        })());
      }
      return _results;
    }
  };

  computeDuration = function(ms) {
    var h, m, s;
    if (ms < 0) {
      ms = 0;
    }
    h = String(Math.floor(ms / 3600000) + 100).substring(1);
    m = String(Math.floor((ms - h * 3600000) / 60000) + 100).substring(1);
    s = String(Math.floor((ms - h * 3600000 - m * 60000) / 1000) + 100).substring(1);
    return m + ':' + s;
  };

  KomaType = (function() {
    function KomaType(id, name, nari, resourceId, nariId, moveDef, value) {
      this.id = id;
      this.name = name;
      this.nari = nari;
      this.resourceId = resourceId;
      this.nariId = nariId;
      this.moveDef = moveDef;
      this.value = value;
    }

    return KomaType;

  })();

  komaTypes = (function() {
    var setResource, _komaTypes;
    _komaTypes = {};
    setResource = function(id, name, nari, resourceId, nariId, moveDef, value) {
      return _komaTypes[id] = new KomaType(id, name, nari, resourceId, nariId, moveDef, value);
    };
    setResource("ou", "玉", false, "ou", "", {
      str: "12346789",
      moves: ["1", "2", "3", "4", "6", "7", "8", "9"]
    }, 9);
    setResource("ki", "金", false, "ki", "", {
      str: "123468",
      moves: ["1", "2", "3", "4", "6", "8"]
    }, 5);
    setResource("gi", "銀", true, "gi", "ng", {
      str: "12379",
      moves: ["1", "2", "3", "7", "9"]
    }, 4);
    setResource("ng", "成銀", false, "gi", "", {
      str: "123468",
      moves: ["1", "2", "3", "4", "6", "8"]
    }, 4);
    setResource("ke", "桂", true, "ke", "nk", {
      str: "ab",
      moves: ["a", "b"]
    }, 3);
    setResource("nk", "成桂", false, "ke", "", {
      str: "123468",
      moves: ["1", "2", "3", "4", "6", "8"]
    }, 3);
    setResource("ky", "香", true, "ky", "ny", {
      str: "2_",
      moves: ["2_"]
    }, 2);
    setResource("ny", "成香", false, "ky", "", {
      str: "123468",
      moves: ["1", "2", "3", "4", "6", "8"]
    }, 2);
    setResource("hi", "飛", true, "hi", "ry", {
      str: "2_4_6_8_",
      moves: ["2_", "4_", "6_", "8_"]
    }, 7);
    setResource("ry", "竜", false, "hi", "", {
      str: "12_34_6_78_9",
      moves: ["1", "2_", "3", "4_", "6_", "7", "8_", "9"]
    }, 7);
    setResource("ka", "角", true, "ka", "um", {
      str: "1_3_7_9_",
      moves: ["1_", "3_", "7_", "9_"]
    }, 6);
    setResource("um", "馬", false, "ka", "", {
      str: "1_23_467_89_",
      moves: ["1_", "2", "3_", "4", "6", "7_", "8", "9_"]
    }, 6);
    setResource("hu", "歩", true, "hu", "to", {
      str: "2",
      moves: ["2"]
    }, 1);
    setResource("to", "と", false, "hu", "", {
      str: "123468",
      moves: ["1", "2", "3", "4", "6", "8"]
    }, 1);
    return _komaTypes;
  })();

  getimage = function(name) {
    var image;
    image = new Image();
    image.src = "./images/koma/60x64/" + name;
    image.width = 60;
    image.height = 64;
    return image;
  };

  images2 = {
    koma1: {
      "ou": getimage("sgl01.png"),
      "hi": getimage("sgl02.png"),
      "ka": getimage("sgl03.png"),
      "ki": getimage("sgl04.png"),
      "gi": getimage("sgl05.png"),
      "ke": getimage("sgl06.png"),
      "ky": getimage("sgl07.png"),
      "hu": getimage("sgl08.png"),
      "ry": getimage("sgl12.png"),
      "um": getimage("sgl13.png"),
      "ng": getimage("sgl15.png"),
      "nk": getimage("sgl16.png"),
      "ny": getimage("sgl17.png"),
      "to": getimage("sgl18.png")
    },
    koma2: {
      "ou": getimage("sgl31.png"),
      "hi": getimage("sgl32.png"),
      "ka": getimage("sgl33.png"),
      "ki": getimage("sgl34.png"),
      "gi": getimage("sgl35.png"),
      "ke": getimage("sgl36.png"),
      "ky": getimage("sgl37.png"),
      "hu": getimage("sgl38.png"),
      "ry": getimage("sgl42.png"),
      "um": getimage("sgl43.png"),
      "ng": getimage("sgl45.png"),
      "nk": getimage("sgl46.png"),
      "ny": getimage("sgl47.png"),
      "to": getimage("sgl48.png")
    }
  };

  MoveConvertor = (function() {
    function MoveConvertor() {
      var create8Aray, cutLength;
      create8Aray = function(v) {
        return _([1, 2, 3, 4, 5, 6, 7, 8]).map(function(i) {
          return util.posMul(v, i);
        });
      };
      this.moveDef = [
        [
          "1", [
            {
              x: 1,
              y: -1,
              length: 1
            }
          ]
        ], [
          "2", [
            {
              x: 0,
              y: -1,
              length: 1
            }
          ]
        ], [
          "3", [
            {
              x: -1,
              y: -1,
              length: 1
            }
          ]
        ], [
          "4", [
            {
              x: 1,
              y: 0,
              length: 1
            }
          ]
        ], [
          "6", [
            {
              x: -1,
              y: 0,
              length: 1
            }
          ]
        ], [
          "7", [
            {
              x: 1,
              y: 1,
              length: 1
            }
          ]
        ], [
          "8", [
            {
              x: 0,
              y: 1,
              length: 1
            }
          ]
        ], [
          "9", [
            {
              x: -1,
              y: 1,
              length: 1
            }
          ]
        ], [
          "a", [
            {
              x: 1,
              y: -2,
              length: 1
            }
          ]
        ], [
          "b", [
            {
              x: -1,
              y: -2,
              length: 1
            }
          ]
        ], [
          "1_", create8Aray({
            x: 1,
            y: -1
          })
        ], [
          "2_", create8Aray({
            x: 0,
            y: -1
          })
        ], [
          "3_", create8Aray({
            x: -1,
            y: -1
          })
        ], [
          "4_", create8Aray({
            x: 1,
            y: 0
          })
        ], [
          "6_", create8Aray({
            x: -1,
            y: 0
          })
        ], [
          "7_", create8Aray({
            x: 1,
            y: 1
          })
        ], [
          "8_", create8Aray({
            x: 0,
            y: 1
          })
        ], [
          "9_", create8Aray({
            x: -1,
            y: 1
          })
        ]
      ];
      this.moveDef1 = {};
      this.moveDef2 = {};
      _(this.moveDef).each((function(_this) {
        return function(pair) {
          _this.moveDef1[pair[0]] = pair[1];
          return _this.moveDef2[pair[0]] = _(pair[1]).map(function(v) {
            return util.reverseVector(v, 2);
          });
        };
      })(this));
      this.moveKeysShort = {
        "1": true,
        "2": true,
        "3": true,
        "4": true,
        "6": true,
        "7": true,
        "8": true,
        "9": true,
        "a": true,
        "b": true
      };
      this.moveKeysLong = {
        "1_": true,
        "2_": true,
        "3_": true,
        "4_": true,
        "6_": true,
        "7_": true,
        "8_": true,
        "9_": true
      };
      cutLength = function(playerNumber, positions, gameBoard) {
        var ngLength, ngPos, toKoma;
        ngLength = 0;
        ngPos = _(positions).find(function(pos) {
          return util.isntVacant(gameBoard.getKoma(pos));
        });
        if (ngPos) {
          toKoma = gameBoard.getKoma(ngPos);
          ngLength = toKoma.playerNumber === playerNumber ? ngPos.length : ngPos.length + 1;
        }
        if (ngLength !== 0) {
          return _(positions).filter(function(pos) {
            return pos.length < ngLength;
          });
        } else {
          return positions;
        }
      };
      this.getMovablePos = function(playerNumber, komaType, position, gameBoard) {
        var moves, result, _moveDef;
        moves = komaTypes[komaType].moveDef.moves;
        _moveDef = playerNumber === 1 ? this.moveDef1 : this.moveDef2;
        result = [];
        _(moves).each(function(move) {
          var positions;
          positions = _(_moveDef[move]).map(function(v) {
            return util.posAdd(position, v);
          });
          positions = _(positions).filter(function(pos) {
            return util.isInRange(pos);
          });
          positions = cutLength(playerNumber, positions, gameBoard);
          return result = result.concat(positions);
        });
        return result;
      };
      this.getPutableCell = function(playerNumber, komaType, gameBoard) {
        var filter, positions;
        positions = [];
        util.allPos(function(x, y) {
          if (util.isVacant(gameBoard.getKoma({
            x: x,
            y: y
          }))) {
            return positions.push({
              x: x,
              y: y
            });
          }
        });
        if (komaType === "hu" || komaType === "ky") {
          filter = playerNumber === 1 ? function(p) {
            return p.y !== 0;
          } : function(p) {
            return p.y !== 8;
          };
        }
        if (komaType === "ke") {
          filter = playerNumber === 1 ? function(p) {
            return p.y > 1;
          } : function(p) {
            return p.y < 7;
          };
        }
        if (filter) {
          return _(positions).filter(filter);
        } else {
          return positions;
        }
      };
      this.getNari = function(playerNumber, komaType, fromPos, toPos) {
        if (komaTypes[komaType].nari === false) {
          return "none";
        }
        if (playerNumber === 1) {
          if (fromPos.y < 3 || toPos.y < 3) {
            if ((komaType === "hu" || komaType === "ky") && toPos.y === 0) {
              return "force";
            }
            if (komaType === "ke" && toPos.y < 2) {
              return "force";
            }
            return "possible";
          } else {
            return "none";
          }
        } else {
          if (fromPos.y > 5 || toPos.y > 5) {
            if ((komaType === "hu" || komaType === "ky") && toPos.y === 8) {
              return "force";
            }
            if (komaType === "ke" && toPos.y > 6) {
              return "force";
            }
            return "possible";
          } else {
            return "none";
          }
        }
      };
    }

    return MoveConvertor;

  })();

  moveConvertor = new MoveConvertor();

  Koma = (function() {
    function Koma(playerNumber, komaType) {
      this.playerNumber = playerNumber;
      this.komaType = komaType;
    }

    return Koma;

  })();

  km1 = function(komaType) {
    return new Koma(1, komaType);
  };

  km2 = function(komaType) {
    return new Koma(2, komaType);
  };

  Board = (function() {
    function Board(player1, player2) {
      this.getOu = __bind(this.getOu, this);
      this.getPlayerKoma = __bind(this.getPlayerKoma, this);
      this.getKomaWithPosition = __bind(this.getKomaWithPosition, this);
      this.removeKomaFromKomadai = __bind(this.removeKomaFromKomadai, this);
      this.removeKoma = __bind(this.removeKoma, this);
      this.putKoma = __bind(this.putKoma, this);
      this.duplicate = __bind(this.duplicate, this);
      this.player1 = player1;
      this.player2 = player2;
      this.komaDai = [[], []];
      this.board = [[], [], [], [], [], [], [], [], []];
      this.life = [9, 9];
    }

    Board.prototype.clearBoard = function() {
      return this.board = [[], [], [], [], [], [], [], [], []];
    };

    Board.prototype.initBoard = function(playerNumber) {
      if (playerNumber === 1) {
        return this.board = [['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], [km1('hu'), km1('hu'), km1('hu'), km1('hu'), km1('hu'), km1('hu'), km1('hu'), km1('hu'), km1('hu')], ['', km1('hi'), '', '', '', '', '', km1('ka'), ''], [km1('ky'), km1('ke'), km1('gi'), km1('ki'), km1('ou'), km1('ki'), km1('gi'), km1('ke'), km1('ky')]];
      } else if (playerNumber === 2) {
        return this.board = [[km2('ky'), km2('ke'), km2('gi'), km2('ki'), km2('ou'), km2('ki'), km2('gi'), km2('ke'), km2('ky')], ['', km2('ka'), '', '', '', '', '', km2('hi'), ''], [km2('hu'), km2('hu'), km2('hu'), km2('hu'), km2('hu'), km2('hu'), km2('hu'), km2('hu'), km2('hu')], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', '']];
      } else {
        return this.board = [[km2('ky'), km2('ke'), km2('gi'), km2('ki'), km2('ou'), km2('ki'), km2('gi'), km2('ke'), km2('ky')], ['', km2('ka'), '', '', '', '', '', km2('hi'), ''], [km2('hu'), km2('hu'), km2('hu'), km2('hu'), km2('hu'), km2('hu'), km2('hu'), km2('hu'), km2('hu')], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '', ''], [km1('hu'), km1('hu'), km1('hu'), km1('hu'), km1('hu'), km1('hu'), km1('hu'), km1('hu'), km1('hu')], ['', km1('hi'), '', '', '', '', '', km1('ka'), ''], [km1('ky'), km1('ke'), km1('gi'), km1('ki'), km1('ou'), km1('ki'), km1('gi'), km1('ke'), km1('ky')]];
      }
    };

    Board.prototype.duplicate = function() {
      var board, x, y, _i, _j;
      board = new Board();
      for (y = _i = 0; _i < 9; y = ++_i) {
        for (x = _j = 0; _j < 9; x = ++_j) {
          if (this.board[x][y]) {
            board.board[x][y] = new Koma(this.board[x][y].playerNumber, this.board[x][y].komaType);
          } else {
            board.board[x][y] = '';
          }
        }
      }
      board.komaDai[0] = board.komaDai[0].concat(this.komaDai[0]);
      board.komaDai[1] = board.komaDai[1].concat(this.komaDai[1]);
      board.life[0] = this.life[0];
      board.life[1] = this.life[1];
      return board;
    };

    Board.prototype.getKoma = function(position) {
      return this.board[position.y][position.x];
    };

    Board.prototype.getExistsHuColumn = function(playerNumber) {
      var koma, result, x, y, _i, _j;
      result = {};
      for (y = _i = 0; _i < 9; y = ++_i) {
        for (x = _j = 0; _j < 9; x = ++_j) {
          koma = this.board[y][x];
          if (koma && koma.playerNumber === playerNumber && koma.komaType === "hu") {
            result[x] = true;
          }
        }
      }
      return result;
    };

    Board.prototype.putKoma = function(koma, position) {
      return this.board[position.y][position.x] = koma;
    };

    Board.prototype.removeKoma = function(position) {
      return this.board[position.y][position.x] = void 0;
    };

    Board.prototype.getKomaFromKomadai = function(playerNumber, komaType) {
      var find, index, koma;
      find = false;
      index = playerNumber === 1 ? 0 : 1;
      koma = _(this.komaDai[index]).find(function(koma) {
        return koma.komaType === komaType;
      });
      this.komaDai[index] = _(this.komaDai[index]).filter(function(koma) {
        if (find) {
          return true;
        }
        if (koma.komaType === komaType) {
          return !(find = true);
        }
        return true;
      });
      return koma;
    };

    Board.prototype.putKomaToKomadai = function(playerNumber, koma) {
      var type;
      koma = new Koma(koma.playerNumber, koma.komaType);
      koma.playerNumber = playerNumber;
      type = komaTypes[koma.komaType];
      koma.komaType = komaTypes[koma.komaType].resourceId;
      if (playerNumber === 1) {
        this.komaDai[0].push(koma);
        return this.komaDai[0] = _(this.komaDai[0]).sortBy(function(koma) {
          return komaTypes[koma.komaType].value;
        });
      } else {
        this.komaDai[1].push(koma);
        return this.komaDai[1] = _(this.komaDai[1]).sortBy(function(koma) {
          return komaTypes[koma.komaType].value;
        });
      }
    };

    Board.prototype.removeKomaFromKomadai = function(playerNumber, komaType) {
      var find, index, koma;
      find = false;
      index = playerNumber === 1 ? 0 : 1;
      koma = _(this.komaDai[index]).find(function(koma) {
        return koma.komaType === komaType;
      });
      this.komaDai[index] = _(this.komaDai[index]).filter(function(koma) {
        if (find) {
          return true;
        }
        if (koma.komaType === komaType) {
          return !(find = true);
        }
        return true;
      });
      return koma;
    };

    Board.prototype.getKomaWithPosition = function(predicate) {
      var koma, result, x, y, _i, _j;
      result = [];
      for (y = _i = 0; _i < 9; y = ++_i) {
        for (x = _j = 0; _j < 9; x = ++_j) {
          koma = this.board[y][x];
          if (koma && predicate(koma)) {
            result.push({
              koma: koma,
              position: {
                x: x,
                y: y
              }
            });
          }
        }
      }
      return result;
    };

    Board.prototype.getPlayerKoma = function(playerNumber) {
      return this.getKomaWithPosition(function(koma) {
        return koma.playerNumber === playerNumber;
      });
    };

    Board.prototype.getOu = function(playerNumber) {
      var ou;
      ou = this.getKomaWithPosition(function(koma) {
        return koma.playerNumber === playerNumber && koma.komaType === "ou";
      });
      if (ou[0]) {
        return ou[0];
      } else {
        return null;
      }
    };

    return Board;

  })();

  Game = (function() {
    function Game(playerNumber, player1, player2) {
      this.playerNumber = playerNumber;
      this.player1 = player1;
      this.player2 = player2;
      this.getCurrentPlayer = __bind(this.getCurrentPlayer, this);
      this.end = __bind(this.end, this);
      this.start = __bind(this.start, this);
      this.getPlayerInfoCommand = __bind(this.getPlayerInfoCommand, this);
      this.board = new Board(this.player1, this.player2);
      this.board.initBoard(this.playerNumber);
      this.updateGameInfo = function() {};
    }

    Game.prototype.getPlayerInfoCommand = function() {
      return {
        method: "adjustTime",
        player1: this.board.player1,
        player2: this.board.player2
      };
    };

    Game.prototype.start = function() {
      var updateTimer;
      this.turn = 1;
      this.state = "playing";
      this.currentTime = Date.now();
      updateTimer = (function(_this) {
        return function() {
          var oldTime, player;
          if (_this.state !== "playing") {
            return;
          }
          oldTime = _this.currentTime;
          _this.currentTime = Date.now();
          player = _this.getCurrentPlayer();
          player.time -= _this.currentTime - oldTime;
          node.emit("graphicApi.updateGameInfo", _this.getPlayerInfoCommand());
          if (player.time < 0) {
            socket.emit('game', {
              method: "timeout",
              playerNumber: 2 - _this.turn % 2
            });
          }
          return window.setTimeout(updateTimer, 500);
        };
      })(this);
      return window.setTimeout(updateTimer, 200);
    };

    Game.prototype.isPlayerTurn = function() {
      return 2 - this.turn % 2 === this.playerNumber;
    };

    Game.prototype.nextTurn = function() {
      return this.turn++;
    };

    Game.prototype.end = function() {
      return this.state = "end";
    };

    Game.prototype.getCurrentPlayer = function() {
      if (this.turn % 2 === 1) {
        return this.board.player1;
      } else {
        return this.board.player2;
      }
    };

    return Game;

  })();

  KifuPlayer = (function() {
    function KifuPlayer(kifu, playerNumber, refresh, player1, player2) {
      var currentBoard;
      this.kifu = kifu;
      this.playerNumber = playerNumber;
      this.refresh = refresh;
      this.player1 = player1;
      this.player2 = player2;
      this.getPlayerInfo = __bind(this.getPlayerInfo, this);
      this.index = 0;
      this.currentTime = Date.now();
      this.board = new Board(player1, player2);
      this.board.initBoard();
      this.boards = [];
      this.elapsedTime = 0;
      currentBoard = this.board;
      this.boards.push(this.board);
      _(this.kifu).each((function(_this) {
        return function(te) {
          return _this.readTe(te);
        };
      })(this));
    }

    KifuPlayer.prototype.getPlayerInfo = function() {
      var board, player1, player2;
      board = this.boards[this.boards.length - 1];
      if (this.currentPlayerNumber === 1) {
        player1 = {
          life: board.player1.life,
          time: board.player1.time + this.currentTime - Date.now() - this.elapsedTime
        };
        player2 = board.player2;
      } else {
        player1 = board.player1;
        player2 = {
          life: board.player2.life,
          time: board.player2.time + this.currentTime - Date.now() - this.elapsedTime
        };
      }
      return {
        player1: player1,
        player2: player2
      };
    };

    KifuPlayer.prototype.getCurrentBoard = function() {
      return this.boards[this.index];
    };

    KifuPlayer.prototype.addKifu = function(te) {
      return this.readTe(te);
    };

    KifuPlayer.prototype.readTe = function(te) {
      var currentBoard, currentPlayerNumber, toKoma;
      currentBoard = this.boards[this.boards.length - 1];
      currentBoard = currentBoard.duplicate();
      currentPlayerNumber = 2 - te.turn % 2;
      currentBoard.player1 = te.playerInfo.player1;
      currentBoard.player2 = te.playerInfo.player2;
      this.currentTime = Date.now();
      currentBoard.turn = te.turn;
      if (te.info.type === "moveKoma") {
        if (!te.foul) {
          if (te.info.from.x !== -1) {
            currentBoard.removeKoma(te.info.from);
            toKoma = currentBoard.getKoma(te.info.to);
          } else {
            currentBoard.removeKomaFromKomadai(currentPlayerNumber, te.info.koma);
          }
          if (toKoma) {
            currentBoard.removeKoma(te.info.to);
            currentBoard.putKomaToKomadai(currentPlayerNumber, new Koma(currentPlayerNumber, toKoma.komaType));
          }
          currentBoard.putKoma(new Koma(currentPlayerNumber, te.info.koma), te.info.to);
          currentBoard.emphasisPosition = te.info.to;
          this.currentPlayerNumber = 2 - (te.turn + 1) % 2;
        } else {
          currentBoard.life[currentPlayerNumber] = currentBoard.life[currentPlayerNumber] - 1;
          this.currentPlayerNumber = 2 - te.turn % 2;
        }
      } else if (te.info.type === "endGame") {
        currentBoard.endGame = true;
      }
      return this.boards.push(currentBoard);
    };

    KifuPlayer.prototype.toStart = function() {
      if (this.index !== 0) {
        this.index = 0;
        return this.refresh(this.index, this.boards[this.index]);
      }
    };

    KifuPlayer.prototype.next = function() {
      this.index++;
      this.refresh(this.index, this.boards[this.index]);
      return this.activateUpdateTimer();
    };

    KifuPlayer.prototype.back = function() {
      this.index--;
      return this.refresh(this.index, this.boards[this.index]);
    };

    KifuPlayer.prototype.toEnd = function() {
      if (this.index !== this.boards.length - 1) {
        this.index = this.boards.length - 1;
        this.refresh(this.index, this.boards[this.index]);
        return this.activateUpdateTimer();
      }
    };

    KifuPlayer.prototype.toIndex = function(index) {
      if (this.index !== index) {
        this.index = index;
        this.boards[index];
        this.refresh(this.index, this.boards[this.index]);
        if (this.index === this.boards.length - 1) {
          return this.activateUpdateTimer();
        }
      }
    };

    KifuPlayer.prototype.activateUpdateTimer = function() {
      var updateTimer;
      updateTimer = (function(_this) {
        return function() {
          if (_this.index !== _this.boards.length - 1) {
            return updateTimer = null;
          }
          if (_this.boards[_this.boards.length - 1].endGame) {
            return updateTimer = null;
          }
          if (kifuApi.state !== "replay") {
            return updateTimer = null;
          }
          node.emit("graphicApi.updateGameInfo", _this.getPlayerInfo());
          return window.setTimeout(updateTimer, 500);
        };
      })(this);
      return updateTimer();
    };

    return KifuPlayer;

  })();

  game = null;

  node.connect({
    name: "gameApi"
  }, function(gameApiSocket) {
    gameApiSocket.on("gameApi.startGame", function(arg) {
      gameApiSocket.broadcast.emit("graphicApi.clearTable");
      gameApiSocket.broadcast.emit("soundApi.playStartSound");
      game = new Game(arg.playerNumber, arg.playerInfo.player1, arg.playerInfo.player2);
      game.start();
      return gameApiSocket.broadcast.emit("graphicApi.redrawKoma", game);
    });
    gameApiSocket.on("gameApi.endGame", function(info) {
      gameApiSocket.broadcast.emit("graphicApi.noticeOute", {
        oute: false
      });
      game.end();
      return gameApiSocket.broadcast.emit("graphicApi.redrawKoma", game);
    });
    gameApiSocket.on("gameApi.tryMoveKoma", function(moveInfo) {
      return socket.emit('game', {
        method: "moveKoma",
        args: moveInfo
      });
    });
    gameApiSocket.on("gameApi.tryPutKoma", function(moveInfo) {
      return socket.emit('game', {
        method: "putKoma",
        args: moveInfo
      });
    });
    gameApiSocket.on("gameApi.doCommand", function(commands) {
      var bkInvated, isFoul;
      isFoul = false;
      bkInvated = graphicApi.invatedPosition;
      graphicApi.invatedPosition = null;
      _(commands).each(function(command) {
        if (command.method === "removeKomaFromKomadai") {
          return game.board.removeKomaFromKomadai(command.playerNumber, command.koma.komaType);
        } else if (command.method === "putKomaToKomadai") {
          return game.board.putKomaToKomadai(command.playerNumber, command.koma);
        } else if (command.method === "removeKoma") {
          game.board.removeKoma(command.position);
          return graphicApi.invatedPosition = command.position;
        } else if (command.method === "putKoma") {
          game.board.putKoma(command.koma, command.position);
          return graphicApi.invatedPosition = command.position;
        } else if (command.method === "adjustTime") {
          game.board.player1.time = command.player1.time;
          game.board.player2.time = command.player2.time;
          return gameApiSocket.broadcast.emit("graphicApi.updateGameInfo", command);
        } else if (command.method === "foul") {
          game.getCurrentPlayer().life--;
          gameApiSocket.broadcast.emit("graphicApi.updateGameInfo", game.getPlayerInfoCommand());
          return isFoul = true;
        } else if (command.method === "noticeOute") {
          return gameApiSocket.broadcast.emit("graphicApi.noticeOute", command);
        }
      });
      if (isFoul) {
        gameApiSocket.broadcast.emit("soundApi.playFoulSound");
        gameApiSocket.broadcast.emit("graphicApi.initializeTableState");
        graphicApi.invatedPosition = bkInvated;
      } else {
        gameApiSocket.broadcast.emit("soundApi.playKomaSound");
        game.nextTurn();
      }
      return gameApiSocket.broadcast.emit("graphicApi.redrawKoma", game);
    });
    return gameApiSocket.on("gameApi.getGame", function() {
      return game;
    });
  });

  BordCanvas = (function() {
    function BordCanvas(selector, onmouseDown) {
      this.selector = selector;
      this.onmouseDown = onmouseDown;
      this.noticeOute = __bind(this.noticeOute, this);
      this.checkCell = __bind(this.checkCell, this);
      this.putKoma = __bind(this.putKoma, this);
      this.init = __bind(this.init, this);
      this.loadCanvas = __bind(this.loadCanvas, this);
    }

    BordCanvas.prototype.loadCanvas = function(cont) {
      var $canvas, mouseX, mouseY;
      if (this.canvas === null || this.canvas === void 0) {
        $canvas = $(this.selector);
        this.canvas = $canvas.get(0);
        this.canvas.width = 540;
        this.canvas.height = 578;
        this.ctx = this.canvas.getContext("2d");
        mouseX = mouseY = 0;
        $canvas.on("mousemove", (function(_this) {
          return function(e) {
            var rect;
            rect = e.target.getBoundingClientRect();
            mouseX = e.clientX - rect.left;
            return mouseY = e.clientY - rect.top;
          };
        })(this));
        return $canvas.on("mousedown", (function(_this) {
          return function(e) {
            var pos;
            pos = util.posFlipX({
              x: parseInt(mouseX / 60),
              y: parseInt(mouseY / 64)
            });
            return _this.onmouseDown(pos);
          };
        })(this));
      }
    };

    BordCanvas.prototype.init = function() {
      this.loadCanvas();
      this.ctx.fillStyle = "rgba(255, 10, 30, 0)";
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      return this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
    };

    BordCanvas.prototype.putKoma = function(image, physicalPosition) {
      this.loadCanvas();
      return this.ctx.drawImage(image, physicalPosition.x * 60, physicalPosition.y * 64);
    };

    BordCanvas.prototype.checkCell = function(position) {
      this.loadCanvas();
      this.ctx.fillStyle = "rgba(256, 150, 150, 0.5)";
      return this.ctx.fillRect(position.x * 60, position.y * 64, 60, 64);
    };

    BordCanvas.prototype.noticeOute = function() {
      this.loadCanvas();
      this.ctx.lineWidth = 3;
      this.ctx.strokeStyle = "rgba(256, 80, 80, 0.9)";
      this.ctx.fillStyle = "rgba(255, 10, 30, 0.7)";
      this.ctx.font = "bold 48px 'Arial'";
      this.ctx.textAlign = 'center';
      return this.ctx.strokeText("王手！", this.canvas.width / 2, this.canvas.height / 2);
    };

    return BordCanvas;

  })();

  KomadaiCanvas = (function() {
    function KomadaiCanvas(selector, onmouseDown) {
      this.selector = selector;
      this.onmouseDown = onmouseDown;
      this.checkRect = __bind(this.checkRect, this);
      this.drawKoma = __bind(this.drawKoma, this);
      this.init = __bind(this.init, this);
      this.loadCanvas = __bind(this.loadCanvas, this);
    }

    KomadaiCanvas.prototype.loadCanvas = function(cont) {
      var $canvas, mouseX, mouseY;
      if (this.canvas === null || this.canvas === void 0) {
        $canvas = $(this.selector);
        this.canvas = $canvas.get(0);
        this.canvas.width = 250;
        this.canvas.height = 250;
        this.ctx = this.canvas.getContext("2d");
        mouseX = mouseY = 0;
        $canvas.on("mousemove", (function(_this) {
          return function(e) {
            var rect;
            rect = e.target.getBoundingClientRect();
            mouseX = e.clientX - rect.left;
            return mouseY = e.clientY - rect.top;
          };
        })(this));
        return $canvas.on("mousedown", (function(_this) {
          return function(e) {
            var rect;
            rect = _(_this.rects).find(function(rect) {
              return (rect.x < mouseX && mouseX < rect.x + rect.width) && (rect.y < mouseY && mouseY < rect.y + rect.height);
            });
            if (rect) {
              return _this.onmouseDown(rect.koma);
            }
          };
        })(this));
      }
    };

    KomadaiCanvas.prototype.init = function() {
      this.loadCanvas();
      this.ctx.fillStyle = "rgba(255, 10, 30, 0)";
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      return this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
    };

    KomadaiCanvas.prototype.drawKoma = function(komalist, flip) {
      var ctx, komaTypeList, list, rects, row, space, tmp;
      this.init();
      tmp = "";
      list = null;
      komaTypeList = [];
      _(komalist).each(function(koma) {
        if (tmp !== koma.komaType) {
          if (list !== null) {
            komaTypeList.push(list);
          }
          list = [koma];
        } else {
          list.push(koma);
        }
        return tmp = koma.komaType;
      });
      if (list !== null) {
        komaTypeList.push(list);
      }
      space = row = 0;
      ctx = this.ctx;
      this.rects = rects = [];
      return _(komaTypeList).each(function(list) {
        var width;
        width = 60 + (list.length - 1) * 12;
        if (space + width > 245) {
          space = 0;
          row++;
        }
        _(list).each(function(koma, i) {
          return ctx.drawImage(domFinder.getKomaImage2(koma, flip), 5 + space + i * 12, row * 68);
        });
        rects.push({
          koma: list[0],
          x: 5 + space,
          width: width,
          y: row * 68,
          height: 64
        });
        return space += width;
      });
    };

    KomadaiCanvas.prototype.checkRect = function(rect) {
      this.loadCanvas();
      this.ctx.fillStyle = "rgba(256, 150, 150, 0.5)";
      return this.ctx.fillRect(rect.x, rect.y, rect.width, rect.height);
    };

    return KomadaiCanvas;

  })();

  node.connect({
    name: "graphicApi"
  }, function(graphicApiSocket) {
    var bordCanvas, clearKoma, drawKoma, initializeTableState, komadai1Canvas, komadai2Canvas, params, redrawKoma, showMovableCell, showNariDiv, showPutableCell;
    bordCanvas = new BordCanvas("#board", function(pos) {
      pos = util.posFlip(pos, params.flip);
      _(_(graphicApi.moveToPositions).filter(function(toPos) {
        return util.posEq(toPos, pos);
      })).each(function(pos) {
        return graphicApi.movekoma(pos);
      });
      _(_(graphicApi.putToPositions).filter(function(toPos) {
        return util.posEq(toPos, pos);
      })).each(function(pos) {
        return graphicApi.putkoma(pos);
      });
      return showMovableCell(pos);
    });
    komadai1Canvas = new KomadaiCanvas("#komadai1", function(koma) {
      return showPutableCell(koma.playerNumber, koma.komaType);
    });
    komadai2Canvas = new KomadaiCanvas("#komadai2", function(koma) {
      return showPutableCell(koma.playerNumber, koma.komaType);
    });
    params = {
      flip: false,
      oute: false
    };
    graphicApiSocket.on("graphicApi.updateGameInfo", function(command) {
      domFinder.getGameInfoDiv(1, params.flip).empty();
      domFinder.getGameInfoDiv(2, params.flip).empty();
      domFinder.getGameInfoDiv(1, params.flip).append("▲ 時間：" + computeDuration(command.player1.time) + " &nbsp;&nbsp;&nbsp;反則：" + command.player1.life);
      return domFinder.getGameInfoDiv(2, params.flip).append("△ 時間：" + computeDuration(command.player2.time) + " &nbsp;&nbsp;&nbsp;反則：" + command.player2.life);
    });
    graphicApiSocket.on("graphicApi.setPlayerInfo", function(command) {
      domFinder.getPlayerImageDiv(1, params.flip).empty();
      domFinder.getPlayerImageDiv(2, params.flip).empty();
      domFinder.getPlayerInfoDiv(1, params.flip).empty();
      domFinder.getPlayerInfoDiv(2, params.flip).empty();
      domFinder.getPlayerImageDiv(1, params.flip).append(domFinder.getIconImage(command.player1.profile_url, command.player1.character));
      domFinder.getPlayerInfoDiv(1, params.flip).append(command.player1.name);
      domFinder.getPlayerImageDiv(2, params.flip).append(domFinder.getIconImage(command.player2.profile_url, command.player2.character));
      return domFinder.getPlayerInfoDiv(2, params.flip).append(command.player2.name);
    });
    redrawKoma = function(arg) {
      initializeTableState();
      clearKoma();
      return drawKoma(arg);
    };
    drawKoma = function(arg) {
      var komadai1, komadai2;
      if (graphicApi.invatedPosition) {
        bordCanvas.checkCell(util.posFlipX(util.posFlip(graphicApi.invatedPosition, params.flip)));
      }
      komadai1 = params.flip ? komadai2Canvas : komadai1Canvas;
      komadai2 = params.flip ? komadai1Canvas : komadai2Canvas;
      komadai1.drawKoma(arg.board.komaDai[0], params.flip);
      komadai2.drawKoma(arg.board.komaDai[1], params.flip);
      util.allPos(function(x, y) {
        var koma;
        koma = arg.board.getKoma({
          x: x,
          y: y
        });
        if (koma) {
          return bordCanvas.putKoma(domFinder.getKomaImage2(koma, params.flip), util.posFlipX(util.posFlip({
            x: x,
            y: y
          }, params.flip)));
        }
      });
      if (params.oute) {
        return bordCanvas.noticeOute();
      }
    };
    graphicApiSocket.on("graphicApi.redrawKoma", redrawKoma);
    showMovableCell = function(fromPos) {
      return graphicApiSocket.broadcast.emit("gameApi.getGame", null, function(game) {
        var koma, positions;
        koma = game.board.getKoma(fromPos);
        if (!koma || koma.playerNumber === (game.turn % 2 + 1) || game.state !== "playing") {
          return;
        }
        initializeTableState();
        graphicApi.movekoma = function(pos) {
          var fromKoma, moveInfo, nari, toPos;
          fromPos = util.posDup(fromPos);
          toPos = util.posDup(pos);
          fromKoma = game.board.getKoma(fromPos);
          moveInfo = {
            from: {
              position: fromPos,
              komaType: fromKoma.komaType
            },
            to: {
              position: toPos,
              komaType: fromKoma.komaType
            }
          };
          nari = moveConvertor.getNari(koma.playerNumber, koma.komaType, moveInfo.from.position, moveInfo.to.position);
          if (nari === "force") {
            moveInfo.to.komaType = komaTypes[moveInfo.to.komaType].nariId;
          } else if (nari === "possible") {
            showNariDiv();
            graphicApi.nari = function(nari) {
              if (nari) {
                moveInfo.to.komaType = komaTypes[moveInfo.to.komaType].nariId;
              }
              return graphicApiSocket.broadcast.emit("gameApi.tryMoveKoma", moveInfo);
            };
            return;
          }
          return graphicApiSocket.broadcast.emit("gameApi.tryMoveKoma", moveInfo);
        };
        positions = moveConvertor.getMovablePos(koma.playerNumber, koma.komaType, fromPos, game.board);
        bordCanvas.checkCell(util.posFlipX(util.posFlip(fromPos, params.flip)));
        _(positions).each(function(pos) {
          return bordCanvas.checkCell(util.posFlipX(util.posFlip(pos, params.flip)));
        });
        graphicApi.moveToPositions = positions;
        return drawKoma(game);
      });
    };
    showNariDiv = function() {
      $("#nariDiv").show();
      $("#modal-overlay").show();
      $("#nariDiv").css({
        "background-color": "#FFFFFF",
        "opacity": 0
      });
      $("#modal-overlay").css({
        "background-color": "#000000",
        "opacity": 0
      });
      $("#nariDiv").animate({
        "background-color": "#FFFFFF",
        "opacity": 0.95
      }, 120);
      return $("#modal-overlay").animate({
        "background-color": "#000000",
        "opacity": 0.3
      }, 120);
    };
    graphicApiSocket.on("graphicApi.nari", function(nari) {
      $("#modal-overlay").hide();
      $("#nariDiv").hide();
      return graphicApi.nari(nari);
    });
    showPutableCell = function(playerNumber, komaType) {
      return graphicApiSocket.broadcast.emit("gameApi.getGame", null, function(game) {
        var columns, positions;
        if (playerNumber === (game.turn % 2 + 1) || game.state !== "playing") {
          return;
        }
        initializeTableState();
        positions = moveConvertor.getPutableCell(playerNumber, komaType, game.board);
        if (komaType === "hu") {
          columns = game.board.getExistsHuColumn(playerNumber);
          positions = _(positions).filter(function(p) {
            if (columns[p.x]) {
              return false;
            } else {
              return true;
            }
          });
        }
        _(positions).each(function(pos) {
          return bordCanvas.checkCell(util.posFlipX(util.posFlip(pos, params.flip)));
        });
        graphicApi.putToPositions = positions;
        drawKoma(game);
        return graphicApi.putkoma = function(pos) {
          var moveInfo;
          moveInfo = {
            to: {
              position: pos,
              komaType: komaType
            }
          };
          return graphicApiSocket.broadcast.emit("gameApi.tryPutKoma", moveInfo);
        };
      });
    };
    clearKoma = function() {
      bordCanvas.init();
      komadai1Canvas.init();
      return komadai2Canvas.init();
    };
    graphicApiSocket.on("graphicApi.clearTable", function() {
      clearKoma();
      return graphicApi.invatedPosition = null;
    });
    initializeTableState = function() {
      graphicApi.moveToPositions = [];
      graphicApi.putToPositions = [];
      return bordCanvas.init();
    };
    graphicApiSocket.on("graphicApi.initializeTableState", initializeTableState);
    graphicApiSocket.on("graphicApi.flipBord", function(flip) {
      if (flip) {
        $("#boardImg").css({
          "transform": "rotate3d(0, 0, 1, 180deg)"
        });
      } else {
        $("#boardImg").css({
          "transform": "rotate3d(0, 0, 1, 0deg)"
        });
      }
      params.flip = flip;
      return redrawKoma(game);
    });
    graphicApiSocket.on("graphicApi.hideModal", function() {
      $("#modal-window").hide();
      $("#modal-overlay").hide();
      if (graphicApi.afterHideModal) {
        graphicApi.afterHideModal();
        return graphicApi.afterHideModal = void 0;
      }
    });
    return graphicApiSocket.on("graphicApi.noticeOute", function(command) {
      return params.oute = command.oute;
    });
  });

  domFinder = {
    getGameInfoDiv: function(playerNumber, flip) {
      if (flip) {
        return $('#gameinfostr' + (playerNumber === 1 ? "2" : "1"));
      } else {
        return $('#gameinfostr' + (playerNumber === 1 ? "1" : "2"));
      }
    },
    getPlayerImageDiv: function(playerNumber, flip) {
      if (flip) {
        return $('#playerimage' + (playerNumber === 1 ? "2" : "1"));
      } else {
        return $('#playerimage' + (playerNumber === 1 ? "1" : "2"));
      }
    },
    getPlayerInfoDiv: function(playerNumber, flip) {
      if (flip) {
        return $('#playerinfo' + (playerNumber === 1 ? "2" : "1"));
      } else {
        return $('#playerinfo' + (playerNumber === 1 ? "1" : "2"));
      }
    },
    getKomaImage2: function(koma, flip) {
      if (flip) {
        if (koma.playerNumber === 2) {
          return images2.koma1[koma.komaType];
        } else {
          return images2.koma2[koma.komaType];
        }
      } else {
        if (koma.playerNumber === 1) {
          return images2.koma1[koma.komaType];
        } else {
          return images2.koma2[koma.komaType];
        }
      }
    },
    getIconImage: function(url, character) {
      var str;
      if (character !== void 0 && character !== null) {
        str = ("0000" + character).slice(-4);
        return $("<img src='./images/icon/snap" + str + ".png'>");
      } else if (url) {
        return $("<img src='" + url + "'>");
      } else {
        return $("<img src='./images/icon/noname.jpeg'>");
      }
    }
  };

  node.connect({
    name: "kifuApi"
  }, function(kifuApiSocket) {
    kifuApiSocket.on("kifuApi.replayKifu", function(arg) {
      var index, option, refresh;
      kifuApi.state = "replay";
      $('#kifuSelectBox').empty();
      $("#kifuInfoDiv").show();
      $("#kifuReplayDiv").show();
      refresh = function(index, board) {
        var kifuLength;
        node.emit("graphicApi.updateGameInfo", {
          player1: board.player1,
          player2: board.player2
        });
        $('#kifuSelectBox').val(index);
        kifuLength = $("#kifuSelectBox").children().length - 1;
        if (board.emphasisPosition) {
          graphicApi.invatedPosition = board.emphasisPosition;
        } else {
          graphicApi.invatedPosition = null;
        }
        node.emit("graphicApi.redrawKoma", {
          board: board,
          turn: 1,
          state: "replay"
        });
        $('#toStartButton').prop('disabled', index === 0);
        $('#backButton').prop('disabled', index === 0);
        $('#nextButton').prop('disabled', kifuLength === index);
        return $('#toEndButton').prop('disabled', kifuLength === index);
      };
      kifuApi.kifuPlayer = new KifuPlayer(arg.kifu, 1, refresh, arg.playerInfo.player1, arg.playerInfo.player2);
      kifuApi.kifuPlayer.activateUpdateTimer();
      node.emit("graphicApi.redrawKoma", {
        board: kifuApi.kifuPlayer.getCurrentBoard(),
        turn: 1,
        state: "replay"
      });
      index = 0;
      $('#kifuSelectBox').unbind("change");
      $('#kifuSelectBox').bind("change", function() {
        index = $('#kifuSelectBox option:selected').val();
        return kifuApi.kifuPlayer.toIndex(parseInt(index));
      });
      option = $("<option value='" + index + "'>対局開始</option>");
      index++;
      $("#kifuSelectBox").append(option);
      return _(arg.kifu).each(function(te) {
        var value;
        if (te.info.type === "moveKoma") {
          if (!te.foul) {
            value = ("" + te.turn + " : ") + (te.info.from.x + 1) + (te.info.from.y + 1) + (te.info.to.x + 1) + (te.info.to.y + 1) + te.info.koma;
          } else {
            value = ("" + te.turn + " : [反則] ") + (te.info.from.x + 1) + (te.info.from.y + 1) + (te.info.to.x + 1) + (te.info.to.y + 1) + te.info.koma;
          }
          option = $("<option value='" + index + "'>" + value + "</option>");
        } else if (te.info.type === "endGame") {
          value = "player" + te.info.winPlayerNumber + " win. (" + te.info.reason + ")";
          option = $("<option value='" + index + "'>" + value + "</option>");
        }
        index++;
        return $("#kifuSelectBox").append(option);
      });
    });
    kifuApiSocket.on("kifuApi.addKifu", function(te) {
      var i, option, value;
      kifuApi.kifuPlayer.addKifu(te);
      i = $("#kifuSelectBox").children().length;
      if (te.info.type === "moveKoma") {
        if (!te.foul) {
          kifuApiSocket.broadcast.emit("soundApi.playKomaSound");
          value = ("" + te.turn + " : ") + (te.info.from.x + 1) + (te.info.from.y + 1) + (te.info.to.x + 1) + (te.info.to.y + 1) + te.info.koma;
        } else {
          kifuApiSocket.broadcast.emit("soundApi.playFoulSound");
          value = ("" + te.turn + " : [反則] ") + (te.info.from.x + 1) + (te.info.from.y + 1) + (te.info.to.x + 1) + (te.info.to.y + 1) + te.info.koma;
        }
        option = $("<option value='" + i + "'>" + value + "</option>");
      } else if (te.info.type === "endGame") {
        value = "player" + te.info.winPlayerNumber + " win. (" + te.info.reason + ")";
        option = $("<option value='" + i + "'>" + value + "</option>");
      }
      return $("#kifuSelectBox").append(option);
    });
    kifuApiSocket.on("kifuApi.toStart", function() {
      return kifuApi.kifuPlayer.toStart();
    });
    kifuApiSocket.on("kifuApi.next", function() {
      return kifuApi.kifuPlayer.next();
    });
    kifuApiSocket.on("kifuApi.back", function() {
      return kifuApi.kifuPlayer.back();
    });
    kifuApiSocket.on("kifuApi.toEnd", function() {
      return kifuApi.kifuPlayer.toEnd();
    });
    kifuApiSocket.on("kifuApi.setElapsedTime", function(time) {
      return kifuApi.kifuPlayer.elapsedTime = time;
    });
    return kifuApiSocket.on("kifuApi.stop", function() {
      return kifuApi.state = "stop";
    });
  });

  node.connect({
    name: "soundApi"
  }, function(soundApiSocket) {
    soundApiSocket.on("soundApi.playStartSound", function() {
      return playSound("start");
    });
    soundApiSocket.on("soundApi.playKomaSound", function() {
      return playSound("koma");
    });
    soundApiSocket.on("soundApi.playFoulSound", function() {
      return playSound("foul");
    });
    return soundApiSocket.on("soundApi.playSound", function(name) {
      if (name !== "koma" && name !== "foul" && name !== "start") {
        return playSound(name);
      }
    });
  });

  node.connect({
    name: "pagingApi"
  }, function(pagingApiSocket) {
    var emptyAll, g$all, hideAll, showAll;
    g$all = function(predicate) {
      return function(list) {
        return _(list).each(function(item) {
          return predicate(item);
        });
      };
    };
    hideAll = g$all(function(selector) {
      return $(selector).hide();
    });
    showAll = g$all(function(selector) {
      return $(selector).show();
    });
    emptyAll = g$all(function(selector) {
      return $(selector).empty();
    });
    pagingApiSocket.on("pagingApi.login", function(arg) {
      $("#lobby-logout").hide();
      $("#lobby-login").show();
      $("#chatDiv").slideDown(500);
      $("#account-icon").empty();
      $("#account-icon").append(domFinder.getIconImage(arg.account.profile_url, arg.account.character));
      $("#account-name").empty();
      $("#lobby-profile").hide();
      return $("#account-name").append("\"" + arg.account.name + "\" さん ごきげんよう");
    });
    pagingApiSocket.on("pagingApi.logout", function() {
      $("#messages").append($('<li>').addClass('system-info').text("サーバーとの接続が切れました。"));
      showModal(["サーバーとの接続が切れました。"], {
        ok: true
      });
      return graphicApi.afterHideModal = function() {
        hideAll(["#lobby-menu", "#lobby-login", "#game", "#room"]);
        return showAll(["#lobby", "#lobby-watch", "#lobby-logout"]);
      };
    });
    pagingApiSocket.on("pagingApi.game", function(arg) {
      showAll(["#game", "#room", "#resignButton"]);
      $("#lobby").hide();
      graphicApi.afterHideModal = void 0;
      _global.node.emit("graphicApi.hideModal");
      _global.node.emit("gameApi.startGame", arg);
      if (arg.playerNumber === 2) {
        _global.node.emit("graphicApi.flipBord", true);
      } else {
        _global.node.emit("graphicApi.flipBord", false);
      }
      return _global.node.emit("graphicApi.setPlayerInfo", arg.account);
    });
    pagingApiSocket.on("pagingApi.kifu", function(arg) {
      showAll(["#game", "#room", "#roomWatchMenu"]);
      return hideAll(["#resignButton"]);
    });
    pagingApiSocket.on("pagingApi.showLoby", function(arg) {
      showAll(["#lobby", "#lobby-login", "#lobby-menu"]);
      return hideAll(["#lobby-logout", "#room", "#roomWatchMenu", "#lobby-watch", "#lobby-profile"]);
    });
    return pagingApiSocket.on("pagingApi.exitRoom", function(arg) {
      showAll(["#lobby", "#lobby-watch"]);
      return hideAll(["#game", "#room", "#lobby-menu", "#lobby-profile"]);
    });
  });

  _global.getRandomCharacter = function() {
    return Math.floor(Math.random() * 46);
  };

  _global.setIconSelector = function() {
    var getRandomNums, images;
    getRandomNums = function(length) {
      var newNum, result;
      result = [];
      while (result.length < length) {
        newNum = _global.getRandomCharacter();
        if (!_(result).contains(newNum)) {
          result.push(newNum);
        }
      }
      return result;
    };
    $("#icon-selector").empty();
    images = [];
    return _(getRandomNums(10)).each(function(num) {
      var image;
      image = domFinder.getIconImage(null, num);
      image.addClass("iconCandidate");
      $("#icon-selector").append(image);
      return image.on("click", function() {
        _global.character = num;
        $(".iconCandidate").css({
          border: "none"
        });
        return image.css({
          border: "solid"
        });
      });
    });
  };

}).call(this);
