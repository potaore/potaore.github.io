// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var $get, $if, createGame, createGraphicApi, createKeyWatcher, createLoop, gConst;

  $get = function(self) {
    return function(cont) {
      cont(self);
      return self;
    };
  };

  $if = function(obj) {
    return function(cont) {
      if (obj !== null && obj !== void 0) {
        return cont(obj);
      }
    };
  };

  gConst = {
    "screen": {
      "width": 400,
      "height": 400
    },
    "interval": 16
  };

  window.onload = function() {
    var game;
    game = createGame({
      "gapi": createGraphicApi(document.getElementById("putishooCanvas")),
      "keyWatcher": createKeyWatcher([
        {
          "keyCode": 38,
          "name": "up"
        }, {
          "keyCode": 40,
          "name": "down"
        }, {
          "keyCode": 37,
          "name": "left"
        }, {
          "keyCode": 39,
          "name": "right"
        }, {
          "keyCode": 90,
          "name": "shoot1"
        }, {
          "keyCode": 88,
          "name": "shoot2"
        }, {
          "keyCode": 90,
          "name": "ok"
        }
      ])
    });
    return createLoop({
      "interval": gConst.interval,
      "predicate": function() {
        game.updater.update();
        return game.drawer.draw();
      }
    })();
  };

  createLoop = function(arg) {
    var resultLoop;
    return resultLoop = function() {
      var t1, t2, waitTime;
      t1 = (new Date()).getTime();
      arg.predicate();
      t2 = (new Date()).getTime();
      waitTime = arg.interval - (t2 - t1);
      return setTimeout(resultLoop, waitTime);
    };
  };

  createGraphicApi = function(canvas) {
    var ctx, effects, getBullet2StockX, getBullet2StockY, getChainCountX, getChainCountY, images, self;
    images = [];
    _(["player", "bullet1", "bullet2", "enemy1", "enemy2", "enemy3", "enemy4", "enemy5", "boss", "enemybullet", "chain1", "chain2", "bullet2stock"]).each(function(id) {
      return images[id] = $get(new Image())(function(img) {
        return img.src = "images/" + id + ".png";
      });
    });
    canvas.width = gConst.screen.width;
    canvas.height = gConst.screen.height;
    ctx = canvas.getContext("2d");
    self = {};
    effects = [];
    self.clear = function() {
      ctx.fillStyle = "rgb(10,10,30)";
      ctx.strokeStyle = "rgb(140, 200, 220)";
      ctx.lineWidth = 2;
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      return ctx.rect(0, 0, canvas.width, canvas.height);
    };
    self.drawTitle = function(info) {
      ctx.lineWidth = 3;
      ctx.strokeStyle = "rgb(140, 240, 220)";
      ctx.font = "italic bold 48px 'Arial'";
      ctx.textAlign = 'center';
      ctx.strokeText("putishoo", gConst.screen.width / 2, gConst.screen.height * 3 / 7);
      ctx.lineWidth = 1;
      ctx.fillStyle = "rgb(140, 240, 220)";
      ctx.font = "italic 16px 'Arial'";
      ctx.textAlign = 'center';
      ctx.fillText("press z to start", gConst.screen.width / 2, gConst.screen.height * 3 / 4);
      return ctx.fillText("hi score : " + info.hiScore + "      last score : " + info.lastScore + " ", gConst.screen.width / 2, gConst.screen.height - 10);
    };
    self.drawInfo = function(info) {
      ctx.textAlign = 'left';
      ctx.font = "italic bold 14px 'Arial'";
      ctx.fillStyle = "rgb(150,220,220)";
      ctx.lineWidth = 1;
      ctx.fillText("level : " + info.level, 20, 20);
      ctx.fillText("score : " + info.score, 120, 20);
      return ctx.fillText("time  : " + info.time, 220, 20);
    };
    self.drawCharacter = function(ch) {
      return $if(images[ch.type2])(function(img) {
        return ctx.drawImage(img, ch.pt.x - img.width / 2, ch.pt.y - img.height / 2);
      });
    };
    self.drawChainCount = function(chainCount) {
      return _(5).times(function(n) {
        return $if(images[n >= chainCount ? "chain1" : "chain2"])(function(img) {
          return ctx.drawImage(img, getChainCountX(n) - img.width / 2, getChainCountY(n) - img.height / 2);
        });
      });
    };
    self.drawBullet2Stock = function(count) {
      return _(count).times(function(n) {
        return $if(images["bullet2stock"])(function(img) {
          return ctx.drawImage(img, getBullet2StockX(n) - img.width / 2, getBullet2StockY(n) - img.height / 2);
        });
      });
    };
    self.resetEffects = function() {
      return effects = [];
    };
    self.createEffects = function(info) {
      var effect;
      if (info.type === "score") {
        effect = {
          "pt": {
            "x": info.pt.x,
            "y": info.pt.y
          },
          "dy": 4,
          "time": 20,
          "score": info.score,
          "draw": function() {
            effect.dy -= 0.2;
            effect.pt.y -= effect.dy;
            if (effect.time % 3 !== 0) {
              ctx.fillStyle = "rgb(240, 240, 100)";
              ctx.font = "italic 16px 'Arial'";
              ctx.textAlign = 'center';
              return ctx.fillText("" + effect.score, effect.pt.x, effect.pt.y);
            }
          }
        };
        return effects.push(effect);
      } else if (info.type === "playerDying") {
        effect = {
          "pt": {
            "x": info.pt.x,
            "y": info.pt.y
          },
          "ve": info.ve,
          "time": 180,
          "draw": function() {
            ctx.lineWidth = 2;
            ctx.strokeStyle = "rgb(30, 140, 250)";
            ctx.beginPath();
            ctx.arc(effect.pt.x, effect.pt.y, 10 + _.random(-3, 3), 0, Math.PI * 2, false);
            return ctx.stroke();
          }
        };
        return effects.push(effect);
      } else if (info.type === "enemyDying") {
        effect = {
          "pt": {
            "x": info.pt.x,
            "y": info.pt.y
          },
          "ve": info.ve,
          "time": 25,
          "draw": function() {
            if (effect.time % 3 !== 0) {
              ctx.lineWidth = 2;
              ctx.strokeStyle = "rgb(250, 200, 100)";
              ctx.beginPath();
              ctx.arc(effect.pt.x, effect.pt.y, 1 + _.random(0, 3), 0, Math.PI * 2, false);
              return ctx.stroke();
            }
          }
        };
        return effects.push(effect);
      } else if (info.type === "bossDying") {
        effect = {
          "pt": {
            "x": info.pt.x,
            "y": info.pt.y
          },
          "ve": info.ve,
          "time": 600,
          "draw": function() {
            ctx.lineWidth = 2;
            ctx.strokeStyle = "rgb(250, 200, 100)";
            ctx.beginPath();
            ctx.arc(effect.pt.x, effect.pt.y, 15 + _.random(-6, 6), 0, Math.PI * 2, false);
            return ctx.stroke();
          }
        };
        return effects.push(effect);
      } else if (info.type === "gameClear") {
        effect = {
          "time": 400,
          "draw": function() {
            ctx.strokeStyle = "rgb(140, 240, 220)";
            ctx.font = "italic 18px 'Arial'";
            ctx.textAlign = 'center';
            ctx.fillText("Congraturations!", gConst.screen.width / 2, gConst.screen.height * 3 / 7);
            ctx.fillText("Game is cleared!", gConst.screen.width / 2, gConst.screen.height * 3 / 7 + 25);
            return ctx.fillText("Try to get higher score nex time!", gConst.screen.width / 2, gConst.screen.height * 3 / 7 + 50);
          }
        };
        return effects.push(effect);
      }
    };
    self.createChainScoreEffects = function(chainCount, bonus) {
      return _(chainCount).times(function(n) {
        return self.createEffects({
          "type": "score",
          "pt": {
            "x": getChainCountX(n),
            "y": getChainCountY(n)
          },
          "score": bonus
        });
      });
    };
    self.createBullet2StockScoreEffects = function(stockCount, bonus) {
      return _(stockCount).times(function(n) {
        return self.createEffects({
          "type": "score",
          "pt": {
            "x": getBullet2StockX(n),
            "y": getBullet2StockY(n)
          },
          "score": bonus
        });
      });
    };
    self.createPlayerDyingEffect = function(pt) {
      return _(32).times(function(n) {
        var direction, speed;
        direction = _.random(0, 120) * Math.PI / 60;
        speed = 0.5 + _.random(0, 10) * 0.1;
        return self.createEffects({
          "type": "playerDying",
          "pt": pt,
          "ve": {
            "x": speed * Math.cos(direction),
            "y": speed * Math.sin(direction)
          }
        });
      });
    };
    self.createEnemyDyingEffect = function(pt) {
      return _(5).times(function(n) {
        var direction, speed;
        direction = _.random(0, 120) * Math.PI / 60;
        speed = 0.5 + _.random(0, 10) * 0.1;
        return self.createEffects({
          "type": "enemyDying",
          "pt": pt,
          "ve": {
            "x": speed * Math.cos(direction),
            "y": speed * Math.sin(direction)
          }
        });
      });
    };
    self.createBossDyingEffect = function(pt) {
      return _(96).times(function(n) {
        var direction, speed;
        direction = _.random(0, 120) * Math.PI / 60;
        speed = 0.5 + _.random(0, 20) * 0.1;
        return self.createEffects({
          "type": "bossDying",
          "pt": pt,
          "ve": {
            "x": speed * Math.cos(direction),
            "y": speed * Math.sin(direction)
          }
        });
      });
    };
    self.drawEffects = function() {
      effects = effects.filter(function(effect) {
        return effect.time > 0;
      });
      return _(effects).each(function(effect) {
        effect.time--;
        if (effect.pt && effect.ve) {
          effect.pt.x += effect.ve.x;
          effect.pt.y += effect.ve.y;
        }
        return effect.draw();
      });
    };
    getChainCountX = function(n) {
      return 50 + n * 25;
    };
    getChainCountY = function(n) {
      return gConst.screen.height - 15;
    };
    getBullet2StockX = function(n) {
      return 250 + n * 25;
    };
    getBullet2StockY = function(n) {
      return gConst.screen.height - 15;
    };
    return self;
  };

  createKeyWatcher = function(keydefs) {
    var keyStates, updateKeyStates;
    keyStates = (function() {
      var _keyStates;
      _keyStates = {};
      _.each(keydefs, function(keydef) {
        return _keyStates[keydef.name] = {
          "name": keydef.name,
          "keyCode": keydef.keyCode,
          "pressed": false,
          "pressedNow": false,
          "pressedUpdate": false,
          "update": false
        };
      });
      return _keyStates;
    })();
    document.onkeydown = function(e) {
      if (!e) {
        e = window.event;
      }
      e.preventDefault();
      return _(_(keydefs).filter(function(ks) {
        return ks.keyCode === e.keyCode;
      })).each(function(ks) {
        var _ref;
        return _ref = [true, true], keyStates[ks.name].update = _ref[0], keyStates[ks.name].pressedUpdate = _ref[1], _ref;
      });
    };
    document.onkeyup = function(e) {
      if (!e) {
        e = window.event;
      }
      return _(_(keydefs).filter(function(ks) {
        return ks.keyCode === e.keyCode;
      })).each(function(ks) {
        var _ref;
        return _ref = [true, false], keyStates[ks.name].update = _ref[0], keyStates[ks.name].pressedUpdate = _ref[1], _ref;
      });
    };
    updateKeyStates = function() {
      _(keyStates).each(function(ks) {
        ks.pressedNow = (!ks.pressed) && ks.update && ks.pressedUpdate;
        if (ks.update) {
          ks.pressed = ks.pressedUpdate;
        }
        return ks.update = false;
      });
      return keyStates;
    };
    return {
      "updateKeyStates": updateKeyStates,
      "getKeyStates": function() {
        return keyStates;
      }
    };
  };

  createGame = function(ui) {
    var drawingCharacterGroups, everyCharactersGroup, getPlayingInit, hittest, hittestCharacterGroupsTuples, hittestGroups, self;
    hittestGroups = function(gp1, gp2, cont) {
      return _.each(gp1, function(ch1) {
        return _.each(gp2, function(ch2) {
          if (hittest(ch1, ch2)) {
            return cont(ch1, ch2);
          }
        });
      });
    };
    hittest = function(ch1, ch2) {
      return Math.pow(ch1.pt.x - ch2.pt.x, 2) + Math.pow(ch1.pt.y - ch2.pt.y, 2) < Math.pow(ch1.size, 2) + Math.pow(ch2.size, 2);
    };
    getPlayingInit = function() {
      return {
        score: 0,
        level: 1,
        time: 0,
        characters: {
          events: [],
          players: [],
          playersBulletes: [],
          enemies: [],
          enemiesBulletes: []
        },
        chainCount: 0,
        bullet2Stock: 0
      };
    };
    everyCharactersGroup = _(["events", "players", "enemies", "playersBulletes", "enemiesBulletes"]);
    hittestCharacterGroupsTuples = _([["players", "enemies"], ["players", "enemiesBulletes"], ["enemies", "playersBulletes"]]);
    drawingCharacterGroups = _(["players", "enemies", "playersBulletes", "enemiesBulletes"]);
    return self = {
      params: {
        schene: "title",
        hiScore: 0,
        lastScore: 0
      },
      playing: getPlayingInit(),
      updater: {
        startGame: function() {
          self.params.schene = "playing";
          self.playing = getPlayingInit();
          ui.gapi.resetEffects();
          return self.updater.addCharacter(self.factory.createGameStartEvent());
        },
        endGame: function() {
          self.params.lastScore = self.playing.score;
          self.params.hiScore = self.params.hiScore < self.playing.score ? self.playing.score : self.params.hiScore;
          self.params.schene = "title";
          return self.playing = getPlayingInit();
        },
        addCharacter: function(ch) {
          var _ref;
          if ((_ref = self.playing.characters[ch.type]) != null) {
            _ref.push(ch);
          }
          return ch;
        },
        update: function() {
          var keyStates;
          self.playing.time++;
          keyStates = ui.keyWatcher.updateKeyStates();
          if (self.params.schene === "title") {
            if (keyStates["ok"].pressedNow) {
              return self.updater.startGame();
            }
          } else if (self.params.schene === "playing") {
            everyCharactersGroup.each(function(gp) {
              return self.playing.characters[gp] = _(self.playing.characters[gp]).filter(function(ch) {
                return ch.living;
              });
            });
            hittestCharacterGroupsTuples.each(function(def) {
              return hittestGroups(self.playing.characters[def[0]], self.playing.characters[def[1]], function(ch1, ch2) {
                ch1.hitted(ch1, ch2);
                return ch2.hitted(ch2, ch1);
              });
            });
            return everyCharactersGroup.each(function(gp) {
              return _(self.playing.characters[gp]).each(function(ch) {
                return typeof ch.action === "function" ? ch.action(ch, {
                  "keyStates": keyStates
                }) : void 0;
              });
            });
          }
        }
      },
      drawer: {
        draw: function() {
          if (self.params.schene === "title") {
            ui.gapi.clear();
            return ui.gapi.drawTitle(self.params);
          } else if (self.params.schene === "playing") {
            ui.gapi.clear();
            drawingCharacterGroups.each(function(gp) {
              return _(self.playing.characters[gp]).each(ui.gapi.drawCharacter);
            });
            ui.gapi.drawInfo(self.playing);
            ui.gapi.drawChainCount(self.playing.chainCount);
            ui.gapi.drawBullet2Stock(self.playing.bullet2Stock);
            return ui.gapi.drawEffects();
          }
        }
      },
      factory: {
        createCharacterBase: function(info) {
          var chSelf, _ref, _ref1, _ref2, _ref3;
          return chSelf = {
            life: (info != null ? info.life : void 0) != null ? info.life : 1,
            attack: (info != null ? info.attack : void 0) != null ? info.attack : 1,
            size: (info != null ? info.size : void 0) != null ? info.size : 1,
            type: (info != null ? info.type : void 0) != null ? info.type : "",
            type2: (info != null ? info.type2 : void 0) != null ? info.type2 : "",
            time: (info != null ? info.time : void 0) != null ? info.time : 0,
            score: (info != null ? info.score : void 0) != null ? info.score : 0,
            pt: {
              x: (info != null ? (_ref = info.pt) != null ? _ref.x : void 0 : void 0) != null ? info.pt.x : 0,
              y: (info != null ? (_ref1 = info.pt) != null ? _ref1.y : void 0 : void 0) != null ? info.pt.y : 0
            },
            ve: {
              x: (info != null ? (_ref2 = info.ve) != null ? _ref2.x : void 0 : void 0) != null ? info.ve.x : 0,
              y: (info != null ? (_ref3 = info.ve) != null ? _ref3.y : void 0 : void 0) != null ? info.ve.y : 0
            },
            living: true,
            dyingEvent: function(me, ch) {
              return info != null ? typeof info.dyingEvent === "function" ? info.dyingEvent(me, ch) : void 0 : void 0;
            },
            action: function(ch, command) {
              ch.time++;
              ch.pt.x += ch.ve.x;
              ch.pt.y += ch.ve.y;
              if (info != null) {
                if (typeof info.action === "function") {
                  info.action(ch, command);
                }
              }
              if (ch.pt.y < -150 || ch.pt.y > gConst.screen.height + 150) {
                return ch.living = false;
              }
            },
            hitted: function(me, ch) {
              if (info != null) {
                if (typeof info.hitted === "function") {
                  info.hitted(me, ch);
                }
              }
              chSelf.life -= ch.attack;
              if (chSelf.life <= 0 && chSelf.living) {
                chSelf.living = false;
                return typeof chSelf.dyingEvent === "function" ? chSelf.dyingEvent(me, ch) : void 0;
              }
            }
          };
        },
        createGameStartEvent: function() {
          return self.factory.createCharacterBase({
            "type": "events",
            "type2": "GameStartEvent",
            "action": function(me) {
              self.updater.addCharacter(self.factory.createPlayer({
                "pt": {
                  "x": gConst.screen.width / 2,
                  "y": gConst.screen.height - 70
                }
              }));
              self.updater.addCharacter(self.factory.createEnemyCreateEvent());
              return me.living = false;
            }
          });
        },
        createEnemyCreateEvent: function() {
          var createBoss, createBullet, createEnemy, createEnemy1, createEnemy2, createEnemy3, createEnemy3Many, createEnemy4, createEnemy5;
          createEnemy = function(info) {
            return $get(self.factory.createCharacterBase(info))(function(enemy) {
              return enemy.dyingEvent = function(me) {
                return ui.gapi.createEnemyDyingEffect(me.pt);
              };
            });
          };
          createBullet = function(info) {
            return self.updater.addCharacter(self.factory.createCharacterBase({
              "pt": info.pt,
              "ve": info.ve,
              "type": "enemiesBulletes",
              "type2": "enemybullet",
              "size": 5,
              "life": 1,
              "attack": 1,
              "score": 0,
              "action": info.action
            }));
          };
          createEnemy1 = function(speed, pt) {
            return self.updater.addCharacter(createEnemy({
              "pt": pt != null ? pt : {
                "x": _.random(30, gConst.screen.width),
                "y": -30
              },
              "ve": {
                "x": 0,
                "y": speed
              },
              "type": "enemies",
              "type2": "enemy1",
              "size": 10,
              "life": 1,
              "attack": 1,
              "score": 1,
              "action": function(me) {},
              "hitted": function(ch) {}
            }));
          };
          createEnemy2 = function() {
            return self.updater.addCharacter(createEnemy({
              "pt": {
                "x": _.random(30, gConst.screen.width),
                "y": -70
              },
              "ve": {
                "x": 0,
                "y": 2
              },
              "type": "enemies",
              "type2": "enemy2",
              "size": 15,
              "life": 1,
              "attack": 1,
              "score": 10,
              "action": function(me) {
                me.ve.y -= 0.015;
                if (me.time === 200) {
                  return _([
                    {
                      "x": 0,
                      "y": 2
                    }, {
                      "x": 1,
                      "y": 1.7
                    }, {
                      "x": -1,
                      "y": 1.7
                    }
                  ]).each(function(ve) {
                    return createBullet({
                      "pt": {
                        "x": me.pt.x,
                        "y": me.pt.y
                      },
                      "ve": ve
                    });
                  });
                }
              },
              "hitted": function(ch) {}
            }));
          };
          createEnemy3 = function(speed, pt, a) {
            return self.updater.addCharacter(createEnemy({
              "pt": pt != null ? pt : {
                "x": _.random(30, gConst.screen.width),
                "y": -30
              },
              "ve": {
                "x": 0,
                "y": speed
              },
              "type": "enemies",
              "type2": "enemy3",
              "size": 10,
              "life": 1,
              "attack": 1,
              "score": 1,
              "action": function(me) {
                if (a) {
                  return me.ve.y += a;
                }
              },
              "hitted": function(ch) {}
            }));
          };
          createEnemy3Many = function(speed, count, a) {
            var startX;
            startX = _.random(30, gConst.screen.width);
            return self.updater.addCharacter(createEnemy({
              "type": "events",
              "type2": "CreateEnemy1ManyEvent",
              "action": function(ch) {
                if (ch.time % 10 === 0) {
                  count--;
                  createEnemy3(speed, {
                    "x": startX,
                    "y": -30
                  }, a);
                }
                if (count <= 0) {
                  return ch.living = false;
                }
              }
            }));
          };
          createEnemy4 = function(speed, pt) {
            var enemy;
            return enemy = self.updater.addCharacter(createEnemy({
              "pt": pt != null ? pt : {
                "x": _.random(30, gConst.screen.width),
                "y": -30
              },
              "ve": {
                "x": 0,
                "y": speed
              },
              "type": "enemies",
              "type2": "enemy4",
              "size": 10,
              "life": 1,
              "attack": 1,
              "score": 10,
              "action": function(me) {},
              "hitted": function(me, ch) {
                return _([
                  {
                    "x": 0,
                    "y": 2
                  }, {
                    "x": 1,
                    "y": 1.7
                  }, {
                    "x": -1,
                    "y": 1.7
                  }
                ]).each(function(ve) {
                  return createBullet({
                    "pt": {
                      "x": me.pt.x,
                      "y": me.pt.y
                    },
                    "ve": ve
                  });
                });
              }
            }));
          };
          createEnemy5 = function(speed, pt) {
            var enemy;
            return enemy = self.updater.addCharacter(createEnemy({
              "pt": pt != null ? pt : {
                "x": _.random(30, gConst.screen.width),
                "y": -30
              },
              "ve": {
                "x": 0,
                "y": speed
              },
              "type": "enemies",
              "type2": "enemy5",
              "size": 10,
              "life": 3,
              "attack": 1,
              "score": 2,
              "action": function(me) {},
              "hitted": function(me, ch) {
                return me.ve.y /= 1.3;
              }
            }));
          };
          createBoss = function() {
            var bossActions, cAction, cDirection, cMove, cTime, enemy, nextAction, setNextAction;
            nextAction = cAction = cMove = function() {};
            cDirection = 1;
            cTime = 0;
            setNextAction = function() {
              if (cTime > 350) {
                cTime = 0;
                cAction = bossActions.wait;
                return nextAction = _.sample([bossActions.attack1, bossActions.attack2, bossActions.attack3]);
              }
            };
            bossActions = {
              arrival: function(me) {
                if (me.pt.y > 100) {
                  me.ve.y = 0;
                  me.ve.x = 0.8;
                  cAction = _.sample([bossActions.attack1, bossActions.attack2, bossActions.attack3]);
                  return cMove = bossActions.move1;
                }
              },
              move1: function(me) {
                if (me.ve.x === 0 || me.pt.x < 100) {
                  me.ve.x = 0.8;
                }
                if (me.pt.x > gConst.screen.width - 100) {
                  me.ve.x = -0.8;
                }
                cTime++;
                cDirection += 0.018;
                return setNextAction();
              },
              attack1: function(me) {
                if (cTime % 30 < 22) {
                  return _([0, Math.PI / 2, Math.PI, 3 * Math.PI / 2]).each(function(addDir) {
                    return createBullet({
                      "pt": me.pt,
                      "ve": {
                        "x": Math.cos(cDirection + addDir) * 6,
                        "y": Math.sin(cDirection + addDir) * 6
                      }
                    });
                  });
                }
              },
              attack2: function(me) {
                if (cTime % 30 === 0) {
                  return _([0, Math.PI / 2, Math.PI, 3 * Math.PI / 2]).each(function(addDir) {
                    return _(13).times(function(n) {
                      var ve;
                      ve = {
                        "x": Math.cos(cDirection + addDir + n * 0.03) * 3,
                        "y": Math.sin(cDirection + addDir + n * 0.03) * 3
                      };
                      return createBullet({
                        "pt": me.pt,
                        "ve": {
                          "x": ve.x,
                          "y": ve.y
                        },
                        "action": function(me) {
                          me.ve.x = ve.x * (1 - (1 - Math.cos(me.time * 0.06)) / 2);
                          return me.ve.y = ve.y * (1 - (1 - Math.cos(me.time * 0.06)) / 2);
                        }
                      });
                    });
                  });
                }
              },
              attack3: function(me) {
                if (cTime % 30 === 0) {
                  return _([0, Math.PI / 2, Math.PI, 3 * Math.PI / 2]).each(function(addDir) {
                    return _(17).times(function(n) {
                      var ve;
                      ve = {
                        "x": Math.cos(cDirection + addDir + n * 0.03) * 2,
                        "y": Math.sin(cDirection + addDir + n * 0.03) * 2
                      };
                      return createBullet({
                        "pt": me.pt,
                        "ve": {
                          "x": ve.x,
                          "y": ve.y
                        },
                        "action": function(me) {
                          return me.ve.y += 0.04;
                        }
                      });
                    });
                  });
                }
              },
              wait: function(me) {
                if (cTime > 200) {
                  cTime = 0;
                  return cAction = nextAction;
                }
              }
            };
            cAction = bossActions.arrival;
            return enemy = self.updater.addCharacter(self.factory.createCharacterBase({
              "pt": typeof pt !== "undefined" && pt !== null ? pt : {
                "x": gConst.screen.width / 2,
                "y": -64
              },
              "ve": {
                "x": 0,
                "y": 1
              },
              "type": "enemies",
              "type2": "boss",
              "size": 64,
              "life": 100,
              "attack": 2,
              "score": 2,
              "action": function(me) {
                cAction(me);
                return cMove(me);
              },
              "hitted": function(me, ch) {},
              "dyingEvent": function(me, ch) {
                self.playing.score += 100;
                ui.gapi.createEffects({
                  "type": "score",
                  "pt": me.pt,
                  "score": 200
                });
                ui.gapi.createBossDyingEffect(me.pt);
                return self.updater.addCharacter(self.factory.createCharacterBase({
                  "type": "events",
                  "type2": "EndClearEvent",
                  "action": function(chSelf) {
                    if (chSelf.time === 60) {
                      ui.gapi.createEffects({
                        "type": "gameClear"
                      });
                    }
                    if (chSelf.time === 420) {
                      return self.updater.endGame();
                    }
                  }
                }));
              }
            }));
          };
          return self.factory.createCharacterBase({
            "type": "events",
            "type2": "EnemyCreateEvent",
            "action": function(ch) {
              self.playing.level = (function() {
                var level;
                level = 1 + parseInt(self.playing.time / 800);
                if (level > 15) {
                  level = 15;
                }
                return level;
              })();
              if (self.playing.level === 1) {
                if (ch.time % 90 === 0) {
                  createEnemy1(1.5);
                }
              }
              if (self.playing.level === 2) {
                if (ch.time % 120 === 10) {
                  createEnemy2();
                }
                if (ch.time % 90 === 0) {
                  createEnemy1(1.5);
                }
              }
              if (self.playing.level === 3) {
                if (ch.time % 120 === 10) {
                  createEnemy2();
                }
                if (ch.time % 180 === 15) {
                  createEnemy3Many(0, 6, 0.025);
                }
              }
              if (self.playing.level === 4) {
                if (ch.time % 180 === 10) {
                  createEnemy2();
                }
                if (ch.time % 160 === 15) {
                  createEnemy3Many(0, 6, 0.025);
                }
                if (ch.time % 40 === 0) {
                  createEnemy1(1.7);
                }
              }
              if (self.playing.level === 5) {
                if (ch.time % 90 === 0) {
                  createEnemy1(1.5);
                }
                if (ch.time % 90 === 40) {
                  createEnemy4(1);
                }
              }
              if (self.playing.level === 6) {
                if (ch.time % 45 === 30) {
                  createEnemy2();
                }
                if (ch.time % 90 === 0) {
                  createEnemy5(2.5);
                }
              }
              if (self.playing.level === 7) {
                if (ch.time % 180 === 15) {
                  createEnemy3Many(0, 6, 0.025);
                }
                if (ch.time % 30 === 10) {
                  createEnemy4(1.1);
                }
              }
              if (self.playing.level === 8) {
                if (ch.time % 20 === 0) {
                  createEnemy1(2.5);
                }
              }
              if (self.playing.level === 9) {
                if (ch.time % 50 === 10) {
                  createEnemy2();
                }
                if (ch.time % 40 === 10) {
                  createEnemy4(1.2);
                }
                if (ch.time % 90 === 0) {
                  createEnemy5(2.5);
                }
              }
              if (self.playing.level === 10) {
                if (ch.time % 20 === 0) {
                  createEnemy1(2.5);
                }
                if (ch.time % 80 === 10) {
                  createEnemy2();
                }
                if (ch.time % 180 === 15) {
                  createEnemy3Many(0, 12, 0.025);
                }
                if (ch.time % 120 === 0) {
                  createEnemy5(2.5);
                }
              }
              if (self.playing.level === 11) {
                if (ch.time % 120 === 10) {
                  createEnemy4(1.2);
                }
                if (ch.time % 15 === 5) {
                  createEnemy2();
                }
              }
              if (self.playing.level === 12) {
                if (ch.time % 40 === 15) {
                  createEnemy3Many(0, 3, 0.025);
                }
                if (ch.time % 20 === 0) {
                  createEnemy5(3.5);
                }
              }
              if (self.playing.level === 13) {
                if (ch.time % 10 === 0) {
                  createEnemy1(3.5);
                }
                if (ch.time % 40 === 10) {
                  createEnemy4(0.8);
                }
                if (ch.time % 40 === 10) {
                  createEnemy4(3.8);
                }
              }
              if (self.playing.level === 14) {
                if (ch.time % 20 === 0) {
                  createEnemy1(2.5);
                }
                if (ch.time % 80 === 10) {
                  createEnemy2();
                }
                if (ch.time % 180 === 15) {
                  createEnemy3Many(0, 8, 0.025);
                }
                if (ch.time % 40 === 10) {
                  createEnemy4(1.2);
                }
              }
              if (self.playing.level === 15) {
                if (ch.time % 1000 === 240) {
                  createBoss();
                  return ch.living = false;
                }
              }
            }
          });
        },
        createPlayer: function(info) {
          var countUpChain, player;
          info.type = "players";
          info.type2 = "player";
          info.hitted = function() {};
          info.action = function(_self, _command) {
            var speed;
            speed = 5;
            if (_(["up", "down", "left", "right"]).filter(function(dir) {
              return _command.keyStates[dir].pressed;
            }).length >= 2) {
              speed = 3.5;
            }
            if (_command.keyStates["up"].pressed && _self.pt.y > 0) {
              _self.pt.y -= speed;
            }
            if (_command.keyStates["down"].pressed && _self.pt.y < gConst.screen.width) {
              _self.pt.y += speed;
            }
            if (_command.keyStates["left"].pressed && _self.pt.x > 0) {
              _self.pt.x -= speed;
            }
            if (_command.keyStates["right"].pressed && _self.pt.x < gConst.screen.height) {
              _self.pt.x += speed;
            }
            if (_command.keyStates["shoot1"].pressedNow) {
              self.updater.addCharacter(self.factory.createCharacterBase({
                "pt": {
                  "x": _self.pt.x,
                  "y": _self.pt.y
                },
                "ve": {
                  "x": 0,
                  "y": -10
                },
                "type": "playersBulletes",
                "type2": "bullet1",
                "size": 25,
                "life": 1,
                "attack": 1,
                "action": function(me) {
                  if (me.time >= 8 && me.living) {
                    self.playing.chainCount = 0;
                    return me.living = false;
                  }
                },
                "hitted": function(me, ch) {
                  player.addScore(ch, 1);
                  if (me.living) {
                    return countUpChain();
                  }
                }
              }));
            }
            if (_command.keyStates["shoot2"].pressedNow && self.playing.bullet2Stock > 0) {
              self.playing.bullet2Stock--;
              return self.updater.addCharacter(self.factory.createCharacterBase({
                "pt": {
                  "x": _self.pt.x,
                  "y": _self.pt.y
                },
                "ve": {
                  "x": 0,
                  "y": -15
                },
                "type": "playersBulletes",
                "type2": "bullet2",
                "size": 35,
                "life": 30,
                "attack": 1,
                "action": function(me) {
                  if (me.time >= 180) {
                    return me.living = false;
                  }
                },
                "hitted": function(me, ch) {
                  return player.addScore(ch, 2);
                }
              }));
            }
          };
          player = self.factory.createCharacterBase(info);
          self.playing.chainCount = 0;
          self.playing.bullet2Stock = 0;
          player.dyingEvent = function() {
            ui.gapi.createPlayerDyingEffect(player.pt);
            return self.updater.addCharacter(self.factory.createCharacterBase({
              "type": "events",
              "type2": "EndGameEvent",
              "action": function(chSelf) {
                if (chSelf.time === 180) {
                  return self.updater.endGame();
                }
              }
            }));
          };
          player.addScore = function(enemy, bonus) {
            if (enemy.type2 !== "boss") {
              self.playing.score += enemy.score;
              ui.gapi.createEffects({
                "type": "score",
                "pt": enemy.pt,
                "score": enemy.score
              });
            }
            if (bonus === 1 && enemy.type2 !== "boss") {
              self.playing.score += self.playing.chainCount * bonus;
              return ui.gapi.createChainScoreEffects(self.playing.chainCount, bonus);
            } else if (bonus === 2) {
              self.playing.score += self.playing.bullet2Stock * bonus;
              return ui.gapi.createBullet2StockScoreEffects(self.playing.bullet2Stock, bonus);
            }
          };
          countUpChain = function() {
            self.playing.chainCount++;
            if (self.playing.chainCount >= 6) {
              if (self.playing.bullet2Stock < 5) {
                self.playing.chainCount = 0;
                return self.playing.bullet2Stock++;
              } else {
                return self.playing.chainCount = 5;
              }
            }
          };
          return player;
        }
      }
    };
  };

}).call(this);
