// Generated by CoffeeScript 1.4.0
(function() {
  var CanvasMap, images, initialize, sounds;

  images = [];

  sounds = [];

  initialize = function() {
    var canvas, canvasMap, connector, context, dao, ext, game, loadImg, map, soundvol;
    loadImg = function(filename) {
      var result;
      result = new Image();
      result.src = filename;
      return result;
    };
    images.hasami = loadImg("img/hasami.png");
    images.hasami_die = loadImg("img/hasami_die.png");
    images.cursor = loadImg("img/editor_cursor.png");
    images.startPoint = loadImg("img/editor_startpoint.png");
    images.floor = [];
    images.floor.push(loadImg("img/floor_plain.png"));
    images.floor.push(loadImg("img/floor_Ice.png"));
    images.floor.push(loadImg("img/floor_net.png"));
    images.floor.push(loadImg("img/floor_step.png"));
    images.floor.push(loadImg("img/floor_arrow_left.png"));
    images.floor.push(loadImg("img/floor_arrow_up.png"));
    images.floor.push(loadImg("img/floor_arrow_right.png"));
    images.floor.push(loadImg("img/floor_arrow_down.png"));
    images.item = [];
    images.item.push(loadImg("img/item_non.png"));
    images.item.push(loadImg("img/item_block.png"));
    images.item.push(loadImg("img/item_energy.png"));
    images.item.push(loadImg("img/item_key.png"));
    images.item.push(loadImg("img/item_gate.png"));
    images.item.push(loadImg("img/item_goal.png"));
    images.item.push(loadImg("img/item_damage.png"));
    images.item_ghost = [];
    images.item_ghost.push(loadImg("img/item_non_ghost.png"));
    images.item_ghost.push(loadImg("img/item_block_ghost.png"));
    images.item_ghost.push(loadImg("img/item_energy_ghost.png"));
    images.item_ghost.push(loadImg("img/item_key_ghost.png"));
    images.item_ghost.push(loadImg("img/item_gate_ghost.png"));
    images.item_ghost.push(loadImg("img/item_goal_ghost.png"));
    images.item_ghost.push(loadImg("img/item_damage_ghost.png"));
    ext = (function() {
      var audio;
      audio = new Audio();
      if (audio.canPlayType("audio/wav") === 'maybe') {
        return "wav";
      } else if (audio.canPlayType("audio/mp3") === 'maybe') {
        return "mp3";
      } else {
        return "none";
      }
    })();
    sounds.effect = [];
    sounds.effect.push(new Audio('sounds/01Walk.' + ext));
    sounds.effect.push(new Audio('sounds/02Dash.' + ext));
    sounds.effect.push(new Audio('sounds/03Ice.' + ext));
    sounds.effect.push(new Audio('sounds/04Charge.' + ext));
    sounds.effect.push(new Audio('sounds/05Key.' + ext));
    sounds.effect.push(new Audio('sounds/06Gate.' + ext));
    sounds.effect.push(new Audio('sounds/07Miss.' + ext));
    sounds.effect.push(new Audio('sounds/08Arrow.' + ext));
    sounds.music = [];
    sounds.music.push(new Audio('sounds/01.' + ext));
    sounds.music.push(new Audio('sounds/02Clear.' + ext));
    sounds.music[0].loop = true;
    canvas = document.getElementById('canvassample');
    context = canvas.getContext('2d');
    connector = new TreeConnector();
    canvasMap = new CanvasMap(connector, context);
    game = new Game(connector.createChild());
    dao = [];
    dao.hydeTextArea = function() {
      return document.getElementById('stgdatatextarea').style.display = "none";
    };
    dao.displayTextArea = function() {
      return document.getElementById('stgdatatextarea').style.display = "block";
    };
    dao.getStageData = function() {
      return document.getElementById('stgdatatextarea').value;
    };
    soundvol = 1;
    dao.switchSoundVolume = function() {
      var changevolume;
      soundvol = 1 - soundvol;
      changevolume = function(value) {
        return value.volume = soundvol;
      };
      map(sounds.effect, changevolume);
      return map(sounds.music, changevolume);
    };
    map = function(arr, func) {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = arr.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(func(arr[i]));
      }
      return _results;
    };
    setMenuModeControl(game, dao);
    return connector.addEvent("output stagedata", function(str) {
      return document.getElementById('stgdatatextarea').value = str;
    });
  };

  CanvasMap = (function() {

    function CanvasMap(connector, context) {
      var direction, draw, drawPlayer, energydisp, f_count, getItemImage, getPlayerImageIndex, play, stop;
      energydisp = document.getElementById('energydisp');
      draw = function(img, pt) {
        return context.drawImage(img, Const.CellSize * pt.x, Const.CellSize * pt.y);
      };
      drawPlayer = function(player) {
        var index;
        index = getPlayerImageIndex(player);
        return context.drawImage(images.hasami, index.x * Const.CellSize, index.y * Const.CellSize, Const.CellSize, Const.CellSize, Const.CellSize * player.point.x, Const.CellSize * player.point.y, Const.CellSize, Const.CellSize);
      };
      f_count = 0;
      direction = 0;
      getPlayerImageIndex = function(player) {
        var index;
        f_count++;
        index = [];
        if (player.energy <= 0 && !player.clear) {
          index.y = 1;
        } else if (player.clear) {
          index.y = 2;
        } else {
          index.y = 0;
        }
        index.x = parseInt(f_count / 10) % 2;
        if (player.direction === Const.Direction.Right) {
          direction = 0;
        }
        if (player.direction === Const.Direction.Left) {
          direction = 3;
        }
        index.y += direction;
        return index;
      };
      play = function(audio) {
        try {
          stop(audio);
          return audio.play();
        } catch (error) {
          return console.log("audio error");
        }
      };
      stop = function(audio) {
        if (!audio.ended) {
          audio.pause();
          return audio.currentTime = 0;
        }
      };
      getItemImage = function(cell) {
        if (cell.item.ghost) {
          return images.item_ghost[cell.item.itemType];
        } else {
          return images.item[cell.item.itemType];
        }
      };
      connector.addEvent("create cell", function(cell) {
        draw(images.floor[cell.floor.floorType], cell.point);
        return draw(getItemImage(cell), cell.point);
      });
      connector.addEvent("update cell", function(cell, startpoint) {
        draw(images.floor[cell.floor.floorType], cell.point);
        draw(getItemImage(cell), cell.point);
        draw(images.startPoint, startpoint);
        return draw(images.cursor, cell.point);
      });
      connector.addEvent("cursor move", function(cellfrom, cellto, startpoint) {
        draw(images.floor[cellfrom.floor.floorType], cellfrom.point);
        draw(getItemImage(cellfrom), cellfrom.point);
        draw(images.startPoint, startpoint);
        return draw(images.cursor, cellto.point);
      });
      connector.addEvent("change startpoint", function(cellfrom, cellto) {
        draw(images.floor[cellfrom.floor.floorType], cellfrom.point);
        draw(getItemImage(cellfrom), cellfrom.point);
        draw(images.startPoint, cellto.point);
        return draw(images.cursor, cellto.point);
      });
      connector.addEvent("set startpoint", function(startpoint, energy) {
        draw(images.startPoint, startpoint);
        return energydisp.value = energy;
      });
      connector.addEvent("player move", function(cellfrom, cellto, player) {
        draw(images.floor[cellfrom.floor.floorType], cellfrom.point);
        draw(getItemImage(cellfrom), cellfrom.point);
        drawPlayer(player);
        return energydisp.value = player.energy;
      });
      connector.addEvent("stage clear", function() {
        stop(sounds.music[Const.Sounds.Music.Stage]);
        return play(sounds.music[Const.Sounds.Music.Clear]);
      });
      connector.addEvent("game over", function(cell, player) {
        draw(images.floor[cell.floor.floorType], cell.point);
        draw(getItemImage(cell), cell.point);
        drawPlayer(player);
        return sounds.effect[Const.Sounds.Effect.Miss].play();
      });
      connector.addEvent("wait", function(cell, player) {
        draw(images.floor[cell.floor.floorType], cell.point);
        draw(getItemImage(cell), cell.point);
        return drawPlayer(player);
      });
      connector.addEvent("player walk", function() {
        return play(sounds.effect[Const.Sounds.Effect.Walk]);
      });
      connector.addEvent("player dash", function() {
        return play(sounds.effect[Const.Sounds.Effect.Dash]);
      });
      connector.addEvent("player slip", function() {
        return play(sounds.effect[Const.Sounds.Effect.Ice]);
      });
      connector.addEvent("arrow", function() {
        return play(sounds.effect[Const.Sounds.Effect.Arrow]);
      });
      connector.addEvent("key", function() {
        return play(sounds.effect[Const.Sounds.Effect.Key]);
      });
      connector.addEvent("gate", function() {
        return play(sounds.effect[Const.Sounds.Effect.Gate]);
      });
      connector.addEvent("energy", function() {
        return play(sounds.effect[Const.Sounds.Effect.Charge]);
      });
      connector.addEvent("start stage", function() {
        return play(sounds.music[Const.Sounds.Music.Stage]);
      });
    }

    return CanvasMap;

  })();

  window.onload = function() {
    if ((navigator.userAgent.indexOf('iPhone') > 0 && navigator.userAgent.indexOf('iPad') === -1) || navigator.userAgent.indexOf('iPod') > 0 || navigator.userAgent.indexOf('Android') > 0) {

    } else {

    }
    return initialize();
  };

}).call(this);
