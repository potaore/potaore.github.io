// Generated by CoffeeScript 1.4.0
(function() {
  var CanvasMap, Cell, Const, Editor, Field, Floor, Floor_Arrow, Floor_Ice, Floor_Net, Floor_Plain, Floor_Step, Game, Item, Item_Block, Item_Damage, Item_Energy, Item_Gate, Item_Goal, Item_Key, Item_Non, Menu, Player, Point, Stage, StageData, TreeConnector, compressNumber, compressStageData, images, initialize, parseNumberFrom, parseNumberTo, replaceAll, restoreStageData, setEditModeControl, setMenuModeControl, setPlayodeControl, sounds,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  TreeConnector = (function() {

    function TreeConnector(parent) {
      var events;
      events = [];
      this.owner;
      this.addEvent = function(eventName, func) {
        return events[eventName] = func;
      };
      this.notice = function(eventName) {
        var _ref;
        if ((_ref = events[eventName]) != null) {
          _ref.apply(null, [].slice.call(arguments, 1, arguments.length));
        }
        if (parent != null) {
          parent.notice.apply(parent, [].slice.call(arguments, 0, arguments.length));
        }
      };
      this.createChild = function() {
        return new TreeConnector(this);
      };
    }

    return TreeConnector;

  })();

  Const = {
    GameMode: {
      Menu: 0,
      Play: 1,
      Edit: 2
    },
    GameState: {
      Wait: 0,
      Moving: 1,
      Cleared: 2,
      GameOver_EnergyEmpty: 3,
      GameOver_CannotMove: 4,
      GameOver_Suicide: 5
    },
    FloorTypeLength: 8,
    FloorType: {
      Plain: 0,
      Ice: 1,
      Net: 2,
      Step: 3,
      ArrowLeft: 4,
      ArrowUp: 5,
      ArrowRight: 6,
      ArrowDown: 7
    },
    ItemTypeLength: 7,
    ItemType: {
      Non: 0,
      Block: 1,
      Energy: 2,
      Key: 3,
      Gate: 4,
      Goal: 5,
      Damage: 6
    },
    MoveType: {
      Stop: 0,
      Walk: 1,
      Dash: 2,
      Slip: 3,
      Clear: 4
    },
    Direction: {
      Left: 0,
      Up: 1,
      Right: 2,
      Down: 3
    },
    FieldSize: {
      x: 15,
      y: 10
    },
    Sounds: {
      Music: {
        Stage: 0,
        Clear: 1
      },
      Effect: {
        Walk: 0,
        Dash: 1,
        Ice: 2,
        Charge: 3,
        Key: 4,
        Gate: 5,
        Miss: 6,
        Arrow: 7
      }
    },
    CellSize: 32
  };

  Point = (function() {

    function Point(x, y) {
      this.x = x;
      this.y = y;
    }

    Point.prototype.move = function(direction) {
      if (direction === Const.Direction.Up) {
        this.y--;
      }
      if (direction === Const.Direction.Right) {
        this.x++;
      }
      if (direction === Const.Direction.Down) {
        this.y++;
      }
      if (direction === Const.Direction.Left) {
        this.x--;
      }
      this.fixPoint();
      return this;
    };

    Point.prototype.tryMove = function(direction) {
      var x, y;
      x = this.x;
      y = this.y;
      if (direction === Const.Direction.Up) {
        y--;
      }
      if (direction === Const.Direction.Right) {
        x++;
      }
      if (direction === Const.Direction.Down) {
        y++;
      }
      if (direction === Const.Direction.Left) {
        x--;
      }
      return this.checkRange(x, y);
    };

    Point.prototype.duplicate = function() {
      return new Point(this.x, this.y);
    };

    Point.prototype.fixPoint = function() {
      this.x = this.fix(this.x, 0, Const.FieldSize.x - 1);
      return this.y = this.fix(this.y, 0, Const.FieldSize.y - 1);
    };

    Point.prototype.checkRange = function(x, y) {
      return 0 <= x && x < Const.FieldSize.x && 0 <= y && y < Const.FieldSize.y;
    };

    Point.prototype.fix = function(value, min, max) {
      if (value < min) {
        value = min;
      }
      if (value > max) {
        value = max;
      }
      return value;
    };

    return Point;

  })();

  Player = (function() {

    function Player(point, energy, direction, clear, connector) {
      this.point = point;
      this.energy = energy;
      this.direction = direction;
      this.keys = 0;
      this.moveType = Const.MoveType.Stop;
      this.clear = clear;
      this.connector = connector;
    }

    Player.prototype.duplicate = function() {
      return new Player(this.point, this.energy, this.direction, this.clear, this.connector);
    };

    Player.prototype.isStop = function() {
      return this.moveType === Const.MoveType.Stop;
    };

    Player.prototype.isMove = function() {
      return this.moveType !== Const.MoveType.Stop;
    };

    Player.prototype.isWalk = function() {
      return this.moveType === Const.MoveType.Walk;
    };

    Player.prototype.isDash = function() {
      return this.moveType === Const.MoveType.Dash;
    };

    Player.prototype.isSlip = function() {
      return this.moveType === Const.MoveType.Slip;
    };

    Player.prototype.isClear = function() {
      return this.moveType === Const.MoveType.Clear;
    };

    Player.prototype.setMoveTypeStop = function() {
      return this.moveType = Const.MoveType.Stop;
    };

    Player.prototype.setMoveTypeWalk = function() {
      this.moveType = Const.MoveType.Walk;
      return this.connector.notice("player walk");
    };

    Player.prototype.setMoveTypeDash = function() {
      this.moveType = Const.MoveType.Dash;
      return this.connector.notice("player dash");
    };

    Player.prototype.setMoveTypeSlip = function() {
      this.moveType = Const.MoveType.Slip;
      return this.connector.notice("player slip");
    };

    Player.prototype.setMoveTypeClear = function() {
      return this.moveType = Const.MoveType.Clear;
    };

    Player.prototype.move = function() {
      return this.point.move(this.direction);
    };

    return Player;

  })();

  Cell = (function() {

    function Cell(floor, item, point) {
      this.floor = floor;
      this.item = item;
      this.point = point;
    }

    Cell.prototype.duplicate = function() {
      return new Cell(this.floor.duplicate(), this.item.duplicate(), this.point.duplicate());
    };

    Cell.prototype.playerTryOut = function(player) {
      this.floor.playerTryOut(player);
      return this.item.playerTryOut(player);
    };

    Cell.prototype.playerTryMove = function(player) {
      this.floor.playerTryMove(player);
      return this.item.playerTryMove(player);
    };

    Cell.prototype.playerOut = function(player) {
      this.floor.playerOut(player);
      return this.item.playerOut(player);
    };

    Cell.prototype.playerOn = function(player) {
      this.floor.playerOn(player);
      return this.item.playerOn(player);
    };

    Cell.prototype.playerStop = function(player) {
      this.floor.playerStop(player);
      return this.item.playerStop(player);
    };

    Cell.prototype.changeFloor = function() {
      var floorType;
      floorType = this.getNextValue(this.floor.floorType, Const.FloorTypeLength);
      return this.floor = Floor.createFloor(floorType);
    };

    Cell.prototype.changeItem = function() {
      var itemType;
      itemType = this.getNextValue(this.item.itemType, Const.ItemTypeLength);
      return this.item = Item.createItem(itemType);
    };

    Cell.prototype.getNextValue = function(currentValue, length) {
      return (currentValue + 1) % length;
    };

    return Cell;

  })();

  Floor = (function() {

    function Floor(param) {
      this.param = param;
    }

    Floor.prototype.duplicate = function() {
      return Floor.createFloor(this.floorType, this.param);
    };

    Floor.prototype.playerTryOut = function(player) {};

    Floor.prototype.playerTryMove = function(player) {};

    Floor.prototype.playerOut = function(player) {
      if (player.isWalk() || player.isSlip()) {
        return player.setMoveTypeStop();
      }
    };

    Floor.prototype.playerOn = function(player) {};

    Floor.prototype.playerStop = function(player) {};

    Floor.createFloor = function(floorType) {
      var result;
      floorType = parseInt(floorType);
      result = (function() {
        switch (floorType) {
          case Const.FloorType.Plain:
            return new Floor_Plain();
          case Const.FloorType.Ice:
            return new Floor_Ice();
          case Const.FloorType.Net:
            return new Floor_Net();
          case Const.FloorType.Step:
            return new Floor_Step();
          case Const.FloorType.ArrowLeft:
            return new Floor_Arrow(Const.Direction.Left);
          case Const.FloorType.ArrowUp:
            return new Floor_Arrow(Const.Direction.Up);
          case Const.FloorType.ArrowRight:
            return new Floor_Arrow(Const.Direction.Right);
          case Const.FloorType.ArrowDown:
            return new Floor_Arrow(Const.Direction.Down);
          default:
            return new Floor_Plain();
        }
      })();
      result.floorType = floorType;
      return result;
    };

    return Floor;

  })();

  Item = (function() {

    function Item(ghost) {
      this.ghost = ghost;
      this.getted = false;
    }

    Item.prototype.duplicate = function() {
      return Item.createItem(this.itemType, this.ghost);
    };

    Item.prototype.playerTryOut = function(player) {};

    Item.prototype.playerTryMove = function(player) {};

    Item.prototype.playerOut = function(player) {
      if (this.ghost) {
        return this.ghost = 0;
      }
    };

    Item.prototype.playerOn = function(player) {};

    Item.prototype.playerStop = function(player) {};

    Item.prototype.setGhost = function() {
      return this.ghost = !this.ghost;
    };

    Item.prototype.getGhostValue = function() {
      if (this.ghost) {
        return 1;
      } else {
        return 0;
      }
    };

    Item.createItem = function(itemType, ghost) {
      var result;
      itemType = parseInt(itemType);
      result = (function() {
        switch (itemType) {
          case Const.ItemType.Non:
            return new Item_Non(ghost);
          case Const.ItemType.Block:
            return new Item_Block(ghost);
          case Const.ItemType.Energy:
            return new Item_Energy(ghost);
          case Const.ItemType.Key:
            return new Item_Key(ghost);
          case Const.ItemType.Gate:
            return new Item_Gate(ghost);
          case Const.ItemType.Goal:
            return new Item_Goal(ghost);
          case Const.ItemType.Damage:
            return new Item_Damage(ghost);
          default:
            return new Item_Non(ghost);
        }
      })();
      result.itemType = itemType;
      return result;
    };

    return Item;

  })();

  Floor_Plain = (function(_super) {

    __extends(Floor_Plain, _super);

    function Floor_Plain() {
      return Floor_Plain.__super__.constructor.apply(this, arguments);
    }

    return Floor_Plain;

  })(Floor);

  Floor_Ice = (function(_super) {

    __extends(Floor_Ice, _super);

    function Floor_Ice() {
      return Floor_Ice.__super__.constructor.apply(this, arguments);
    }

    Floor_Ice.prototype.playerOn = function(player) {
      if (player.isWalk() || player.isSlip() || player.isStop()) {
        return player.setMoveTypeSlip();
      }
    };

    return Floor_Ice;

  })(Floor);

  Floor_Net = (function(_super) {

    __extends(Floor_Net, _super);

    function Floor_Net() {
      return Floor_Net.__super__.constructor.apply(this, arguments);
    }

    Floor_Net.prototype.playerOn = function(player) {
      return player.setMoveTypeStop();
    };

    return Floor_Net;

  })(Floor);

  Floor_Step = (function(_super) {

    __extends(Floor_Step, _super);

    function Floor_Step() {
      return Floor_Step.__super__.constructor.apply(this, arguments);
    }

    Floor_Step.prototype.playerTryMove = function(player) {
      if (player.isWalk() || player.isSlip()) {
        return player.setMoveTypeStop();
      }
    };

    return Floor_Step;

  })(Floor);

  Floor_Arrow = (function(_super) {

    __extends(Floor_Arrow, _super);

    function Floor_Arrow() {
      return Floor_Arrow.__super__.constructor.apply(this, arguments);
    }

    Floor_Arrow.prototype.playerTryOut = function(player) {
      return player.direction = this.param;
    };

    Floor_Arrow.prototype.playerOut = function(player) {
      player.connector.notice("arrow");
      return Floor_Arrow.__super__.playerOut.call(this, player);
    };

    return Floor_Arrow;

  })(Floor);

  Item_Non = (function(_super) {

    __extends(Item_Non, _super);

    function Item_Non() {
      return Item_Non.__super__.constructor.apply(this, arguments);
    }

    return Item_Non;

  })(Item);

  Item_Block = (function(_super) {

    __extends(Item_Block, _super);

    function Item_Block() {
      return Item_Block.__super__.constructor.apply(this, arguments);
    }

    Item_Block.prototype.playerTryMove = function(player) {
      if (!this.ghost) {
        return player.setMoveTypeStop();
      }
    };

    return Item_Block;

  })(Item);

  Item_Energy = (function(_super) {

    __extends(Item_Energy, _super);

    function Item_Energy() {
      return Item_Energy.__super__.constructor.apply(this, arguments);
    }

    Item_Energy.prototype.playerOn = function(player) {
      if (!this.ghost && !this.getted) {
        player.energy += 5;
        this.itemType = Const.ItemType.Non;
        this.getted = true;
        return player.connector.notice("energy");
      }
    };

    return Item_Energy;

  })(Item);

  Item_Key = (function(_super) {

    __extends(Item_Key, _super);

    function Item_Key() {
      return Item_Key.__super__.constructor.apply(this, arguments);
    }

    Item_Key.prototype.playerOn = function(player) {
      if (!this.ghost && !this.getted) {
        player.keys++;
        this.itemType = Const.ItemType.Non;
        this.getted = true;
        return player.connector.notice("key");
      }
    };

    return Item_Key;

  })(Item);

  Item_Gate = (function(_super) {

    __extends(Item_Gate, _super);

    function Item_Gate() {
      return Item_Gate.__super__.constructor.apply(this, arguments);
    }

    Item_Gate.prototype.playerTryMove = function(player) {
      if (!this.ghost && !this.getted) {
        if (player.keys <= 0) {
          return player.setMoveTypeStop();
        } else {
          player.keys--;
          this.itemType = Const.ItemType.Non;
          this.getted = true;
          return player.connector.notice("gate");
        }
      }
    };

    return Item_Gate;

  })(Item);

  Item_Goal = (function(_super) {

    __extends(Item_Goal, _super);

    function Item_Goal() {
      return Item_Goal.__super__.constructor.apply(this, arguments);
    }

    Item_Goal.prototype.playerStop = function(player) {
      if (!this.ghost && !this.getted) {
        return player.setMoveTypeClear();
      }
    };

    return Item_Goal;

  })(Item);

  Item_Damage = (function(_super) {

    __extends(Item_Damage, _super);

    function Item_Damage() {
      return Item_Damage.__super__.constructor.apply(this, arguments);
    }

    Item_Damage.prototype.playerOn = function(player) {
      if (!this.ghost && !this.getted) {
        player.energy--;
        if (player.energy <= 0) {
          return player.setMoveTypeStop();
        }
      }
    };

    return Item_Damage;

  })(Item);

  Game = (function() {

    function Game(connector) {
      var isEdit, isMenu, isPlay,
        _this = this;
      this.gameState = Const.GameState.Wait;
      this.connector = connector;
      this.startGame = function(stageData) {
        this.stageData = stageData;
        this.gameMode = Const.GameMode.Play;
        this.gameState = Const.GameState.Wait;
        this.stage = new Stage(stageData, connector.createChild());
        return this.connector.notice("start stage");
      };
      this.retry = function(stageData) {
        this.stageData = stageData;
        this.gameMode = Const.GameMode.Play;
        this.gameState = Const.GameState.Wait;
        return this.stage = new Stage(stageData, connector.createChild());
      };
      this.startEdit = function() {
        this.gameMode = Const.GameMode.Edit;
        return this.editor = new Editor(connector.createChild());
      };
      isMenu = function() {
        return _this.gameMode === Const.GameMode.Menu;
      };
      isPlay = function() {
        return _this.gameMode === Const.GameMode.Play;
      };
      isEdit = function() {
        return _this.gameMode === Const.GameMode.Edit;
      };
      this.movePlayerWalkLeft = function() {
        if (_this.checkPlayModeInputState()) {
          return _this.stage.movePlayerWalk(Const.Direction.Left);
        }
      };
      this.movePlayerWalkUp = function() {
        if (_this.checkPlayModeInputState()) {
          return _this.stage.movePlayerWalk(Const.Direction.Up);
        }
      };
      this.movePlayerWalkRight = function() {
        if (_this.checkPlayModeInputState()) {
          return _this.stage.movePlayerWalk(Const.Direction.Right);
        }
      };
      this.movePlayerWalkDown = function() {
        if (_this.checkPlayModeInputState()) {
          return _this.stage.movePlayerWalk(Const.Direction.Down);
        }
      };
      this.movePlayerDashLeft = function() {
        if (_this.checkPlayModeInputState()) {
          return _this.stage.movePlayerDash(Const.Direction.Left);
        }
      };
      this.movePlayerDashUp = function() {
        if (_this.checkPlayModeInputState()) {
          return _this.stage.movePlayerDash(Const.Direction.Up);
        }
      };
      this.movePlayerDashRight = function() {
        if (_this.checkPlayModeInputState()) {
          return _this.stage.movePlayerDash(Const.Direction.Right);
        }
      };
      this.movePlayerDashDown = function() {
        if (_this.checkPlayModeInputState()) {
          return _this.stage.movePlayerDash(Const.Direction.Down);
        }
      };
      this.killPlayer = function() {
        return _this.stage.killPlayer();
      };
      this.checkPlayModeInputState = function() {
        if (_this.gameState === Const.GameState.Cleared) {
          _this.connector.notice("already stage cleared");
          return false;
        }
        if (!isPlay()) {
          return false;
        }
        if (_this.gameState === Const.GameState.GameOver_EnergyEmpty && (_this.stageData != null)) {
          _this.retry(_this.stageData);
          return false;
        }
        if (_this.gameState === Const.GameState.Wait) {
          _this.gameState = Const.GameState.Moving;
          return true;
        }
        return false;
      };
      this.update = function() {
        if (isPlay() && _this.gameState === Const.GameState.Moving) {
          return _this.stage.update();
        } else if (isPlay()) {
          return connector.notice("wait", _this.stage.getCurrentCell().duplicate(), _this.stage.field.player.duplicate());
        }
      };
      this.changeFloor = function() {
        if (isEdit()) {
          return _this.editor.changeFloor();
        }
      };
      this.changeItem = function() {
        if (isEdit()) {
          return _this.editor.changeItem();
        }
      };
      this.moveCursorLeft = function() {
        if (isEdit()) {
          return _this.editor.moveCursor(Const.Direction.Left);
        }
      };
      this.moveCursorUp = function() {
        if (isEdit()) {
          return _this.editor.moveCursor(Const.Direction.Up);
        }
      };
      this.moveCursorRight = function() {
        if (isEdit()) {
          return _this.editor.moveCursor(Const.Direction.Right);
        }
      };
      this.moveCursorDown = function() {
        if (isEdit()) {
          return _this.editor.moveCursor(Const.Direction.Down);
        }
      };
      this.outputStageData = function() {
        if (isEdit()) {
          return _this.editor.outputStageData();
        }
      };
      this.outputStageUrl = function() {
        if (isEdit()) {
          return _this.editor.outputStageUrl();
        }
      };
      this.loadStageData = function(stageData) {
        if (isEdit()) {
          return _this.editor.loadStageData(stageData);
        }
      };
      this.changeStartPoint = function() {
        if (isEdit()) {
          return _this.editor.changeStartPoint();
        }
      };
      this.setGhost = function() {
        if (isEdit()) {
          return _this.editor.setGhost();
        }
      };
      this.setPlayerEnergy = function(energy) {
        if (isEdit()) {
          return _this.editor.setPlayerEnergy(energy);
        }
      };
      this.connector.addEvent("stage clear", function() {
        return _this.gameState = Const.GameState.Cleared;
      });
      this.connector.addEvent("game over", function() {
        return _this.gameState = Const.GameState.GameOver_EnergyEmpty;
      });
      this.connector.addEvent("player stop", function() {
        if (_this.gameState !== Const.GameState.Cleared) {
          return _this.gameState = Const.GameState.Wait;
        }
      });
    }

    Game.prototype.loadStage = function(stageNo) {
      var player;
      return player = new Player();
    };

    return Game;

  })();

  Editor = (function() {

    function Editor(connector) {
      var cursor;
      this.connector = connector;
      this.field = new Field(connector.createChild());
      cursor = new Point(0, 0);
      this.changeItem = function() {
        return this.field.changeItem(cursor.duplicate());
      };
      this.changeFloor = function() {
        return this.field.changeFloor(cursor.duplicate());
      };
      this.changeStartPoint = function() {
        return this.field.changeStartPoint(cursor.duplicate());
      };
      this.moveCursor = function(direction) {
        var pt1, pt2;
        pt1 = cursor.duplicate();
        this.field.getCell(cursor.move(direction));
        pt2 = cursor.duplicate();
        return this.noticeCursorMove(this.field.getCell(pt1), this.field.getCell(pt2));
      };
      this.outputStageData = function() {
        var stageData;
        stageData = this.field.toString();
        return this.connector.notice("output stagedata", stageData);
      };
      this.outputStageUrl = function() {
        var stageData;
        stageData = this.field.toString();
        return this.connector.notice("output stageurl", stageData);
      };
      this.loadStageData = function(stageData) {
        this.field.loadStageData(stageData);
        return this.noticeCursorMove(this.field.getCell(cursor).duplicate(), this.field.getCell(cursor).duplicate());
      };
      this.setGhost = function() {
        return this.field.setGhost(cursor.duplicate());
      };
      this.setPlayerEnergy = function(energy) {
        energy = parseInt(energy);
        if (energy === NaN) {
          energy = 0;
        }
        return this.field.player.energy = energy;
      };
      this.noticeCursorMove = function(cellfrom, cellto) {
        return this.connector.notice("cursor move", cellfrom, cellto, this.field.player.point.duplicate());
      };
      this.noticeCursorMove(this.field.getCell(cursor).duplicate(), this.field.getCell(cursor).duplicate());
    }

    return Editor;

  })();

  Field = (function() {

    function Field(connector) {
      var floor, i, item, j, pt, _i, _j, _ref, _ref1;
      this.connector = connector;
      connector.notice("create field", 10, 14);
      this.player = new Player(new Point(0, 0), 15, Const.Direction.Right, false, connector.createChild());
      this.map = [];
      for (i = _i = 0, _ref = Const.FieldSize.x; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.map[i] = [];
        for (j = _j = 0, _ref1 = Const.FieldSize.y; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          floor = Floor.createFloor(Const.FloorType.Plain);
          item = Item.createItem(Const.ItemType.Non);
          pt = new Point(i, j);
          this.map[i][j] = new Cell(floor, item, pt, connector.createChild());
          this.connector.notice("create cell", this.map[i][j].duplicate());
        }
      }
      return;
    }

    Field.prototype.changeFloor = function(pt) {
      this.getCell(pt).changeFloor();
      return this.connector.notice("update cell", this.getCell(pt).duplicate(), this.player.point.duplicate());
    };

    Field.prototype.changeItem = function(pt) {
      this.getCell(pt).changeItem();
      return this.connector.notice("update cell", this.getCell(pt).duplicate(), this.player.point.duplicate());
    };

    Field.prototype.changeStartPoint = function(pt) {
      this.connector.notice("change startpoint", this.getCell(this.player.point).duplicate(), this.getCell(pt).duplicate());
      return this.player.point = pt.duplicate();
    };

    Field.prototype.setGhost = function(pt) {
      this.getCell(pt).item.setGhost();
      return this.connector.notice("update cell", this.getCell(pt).duplicate(), this.player.point.duplicate());
    };

    Field.prototype.getCell = function(pt) {
      return this.map[pt.x][pt.y];
    };

    Field.prototype.toString = function() {
      var floorStr, itemStr, startPointStr, x, y, _i, _j, _ref, _ref1;
      floorStr = "";
      itemStr = "";
      for (x = _i = 0, _ref = Const.FieldSize.x; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        for (y = _j = 0, _ref1 = Const.FieldSize.y; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          floorStr += this.map[x][y].floor.floorType + ",";
          itemStr += this.map[x][y].item.itemType + ":" + this.map[x][y].item.getGhostValue() + ",";
        }
        floorStr = floorStr.slice(0, -1);
        itemStr = itemStr.slice(0, -1);
        floorStr += ";";
        itemStr += ";";
      }
      floorStr = floorStr.slice(0, -1);
      itemStr = itemStr.slice(0, -1);
      startPointStr = this.player.point.x + "," + this.player.point.y + "," + this.player.energy;
      return floorStr + "\n" + itemStr + "\n" + startPointStr;
    };

    Field.prototype.loadStageData = function(stageData) {
      var arr, floor, floorColumnData, floorMap, item, itemColumnData, itemInfo, itemMap, pt, startPointData, x, y, _i, _j, _ref, _ref1;
      arr = stageData.split(/\r\n|\r|\n/);
      floorColumnData = arr[0].split(";");
      itemColumnData = arr[1].split(";");
      floorMap = [];
      itemMap = [];
      for (x = _i = 0, _ref = Const.FieldSize.x; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        floorMap[x] = floorColumnData[x].split(",");
        itemMap[x] = itemColumnData[x].split(",");
        for (y = _j = 0, _ref1 = Const.FieldSize.y; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          floor = Floor.createFloor(floorMap[x][y]);
          itemInfo = itemMap[x][y].split(":");
          item = Item.createItem(itemInfo[0], parseInt(itemInfo[1]));
          pt = new Point(x, y);
          this.map[x][y] = new Cell(floor, item, pt, this.connector.createChild());
          this.connector.notice("create cell", this.map[x][y].duplicate());
        }
      }
      startPointData = arr[2].split(",");
      this.player.point = new Point(startPointData[0], startPointData[1]);
      this.player.energy = parseInt(startPointData[2]);
      this.connector.notice("set startpoint", this.player.point.duplicate(), this.player.energy);
    };

    return Field;

  })();

  Menu = (function() {

    function Menu(connector) {
      this.cursor = 0;
      this.connector = connector;
    }

    return Menu;

  })();

  Stage = (function() {

    function Stage(stageData, connector) {
      this.field = new Field(connector.createChild());
      this.field.loadStageData(stageData);
      this.connector = connector;
      this.connector.notice("player move", this.getCurrentCell(this.field.player.point).duplicate(), this.getCurrentCell(this.field.player.point).duplicate(), this.field.player.duplicate());
      this.initialize = function() {
        return this.field.loadStageData(stageData);
      };
    }

    Stage.prototype.getCell = function(pt) {
      return this.field.getCell(pt);
    };

    Stage.prototype.getCurrentCell = function() {
      return this.getCell(this.field.player.point);
    };

    Stage.prototype.getNextCell = function() {
      var pt;
      pt = this.field.player.point.duplicate().move(this.field.player.direction);
      return this.getCell(pt);
    };

    Stage.prototype.movePlayerWalk = function(direction) {
      this.field.player.setMoveTypeWalk();
      return this.movePlayerCommon(direction);
    };

    Stage.prototype.movePlayerDash = function(direction) {
      this.field.player.setMoveTypeDash();
      return this.movePlayerCommon(direction);
    };

    Stage.prototype.movePlayerCommon = function(direction) {
      return this.movePlayerRepeat(direction);
    };

    Stage.prototype.movePlayerRepeat = function(direction) {
      this.firstCheckMovable(direction);
      if (this.field.player.isMove()) {
        return this.update();
      } else {
        this.connector.notice("player fail move");
        return this.connector.notice("player stop");
      }
    };

    Stage.prototype.playerMoveEnd = function() {
      this.getCurrentCell().playerStop(this.field.player);
      this.field.player.energy--;
      if (this.field.player.isClear()) {
        this.field.player.clear = true;
        this.connector.notice("stage clear");
      } else if (this.field.player.energy <= 0) {
        this.connector.notice("game over", this.getCell(this.field.player.point).duplicate(), this.field.player.duplicate());
        return;
      }
      this.connector.notice("player stop");
    };

    Stage.prototype.update = function() {
      var cell, cellfrom, cellto, pt;
      if (!this.field.player.isMove()) {
        cell = this.getCurrentCell().duplicate();
        this.playerMoveEnd();
        this.connector.notice("player move", cell, cell, this.field.player.duplicate());
        return;
      }
      pt = this.field.player.point.duplicate();
      this.movePlayer();
      cellfrom = this.getCell(pt).duplicate();
      cellto = this.getCurrentCell().duplicate();
      if (this.field.player.isStop()) {
        this.playerMoveEnd();
      }
      this.connector.notice("player move", cellfrom, cellto, this.field.player.duplicate());
      return this.checkMovable();
    };

    Stage.prototype.killPlayer = function() {
      this.field.player.energy = 0;
      return this.connector.notice("game over", this.getCell(this.field.player.point).duplicate(), this.field.player.duplicate());
    };

    Stage.prototype.movePlayer = function() {
      this.getCurrentCell().playerOut(this.field.player);
      this.field.player.move();
      this.getCurrentCell().playerOn(this.field.player);
    };

    Stage.prototype.firstCheckMovable = function(direction) {
      this.field.player.direction = direction;
      this.checkMovable();
    };

    Stage.prototype.checkMovable = function() {
      this.getCurrentCell().playerTryOut(this.field.player);
      if (this.field.player.point.tryMove(this.field.player.direction)) {
        this.getNextCell().playerTryMove(this.field.player);
      } else {
        this.field.player.setMoveTypeStop();
      }
      return this.field.player.isMove();
    };

    return Stage;

  })();

  setPlayodeControl = function(game) {
    var keyEventArray, keyEventArray_withCtrl;
    keyEventArray = [];
    keyEventArray[13] = game.killPlayer;
    keyEventArray[37] = game.movePlayerWalkLeft;
    keyEventArray[38] = game.movePlayerWalkUp;
    keyEventArray[39] = game.movePlayerWalkRight;
    keyEventArray[40] = game.movePlayerWalkDown;
    keyEventArray_withCtrl = [];
    keyEventArray[13] = game.killPlayer;
    keyEventArray_withCtrl[37] = game.movePlayerDashLeft;
    keyEventArray_withCtrl[38] = game.movePlayerDashUp;
    keyEventArray_withCtrl[39] = game.movePlayerDashRight;
    keyEventArray_withCtrl[40] = game.movePlayerDashDown;
    return document.onkeydown = function(e) {
      var _name, _name1;
      if (typeof e === void 0 || !(e != null)) {
        e = window.event;
      }
      if (e.ctrlKey || e.shiftKey) {
        if (typeof keyEventArray_withCtrl[_name = e.keyCode] === "function") {
          keyEventArray_withCtrl[_name]();
        }
      } else {
        if (typeof keyEventArray[_name1 = e.keyCode] === "function") {
          keyEventArray[_name1]();
        }
      }
      return e.returnValue = false;
    };
  };

  setEditModeControl = function(game, dao) {
    var energydisp, keyEventArray;
    keyEventArray = [];
    keyEventArray[32] = game.changeFloor;
    keyEventArray[13] = game.changeItem;
    keyEventArray[37] = game.moveCursorLeft;
    keyEventArray[38] = game.moveCursorUp;
    keyEventArray[39] = game.moveCursorRight;
    keyEventArray[40] = game.moveCursorDown;
    keyEventArray[71] = game.setGhost;
    keyEventArray[76] = function() {
      var stageData;
      stageData = dao.getStageData();
      return game.loadStageData(stageData);
    };
    keyEventArray[79] = game.outputStageData;
    keyEventArray[85] = game.outputStageUrl;
    keyEventArray[80] = function() {
      var stageData;
      stageData = dao.getStageData();
      game.startGame(stageData);
      return setPlayodeControl(game);
    };
    keyEventArray[83] = game.changeStartPoint;
    energydisp = document.getElementById('energydisp').onchange = function() {
      return game.setPlayerEnergy(this.value);
    };
    document.getElementById('urlButton').onclick = game.outputStageUrl;
    return document.onkeydown = function(e) {
      var _name;
      if (typeof e === void 0 || !(e != null)) {
        e = window.event;
      }
      return typeof keyEventArray[_name = e.keyCode] === "function" ? keyEventArray[_name]() : void 0;
    };
  };

  setMenuModeControl = function(game, dao, connector) {
    var menu, startGame;
    menu = document.getElementById('menu');
    setTimeout((function() {
      game.update();
      return setTimeout(arguments.callee, 50);
    }), 50);
    connector.addEvent("already stage cleared", function() {
      menu.value++;
      return startGame();
    });
    document.getElementById('startbutton').onclick = function() {
      return startGame();
    };
    startGame = function() {
      if (menu.value === "edit") {
        dao.displayTextArea();
        setEditModeControl(game, dao);
        return game.startEdit();
      } else {
        dao.hydeTextArea();
        setPlayodeControl(game);
        if (menu.value === "") {
          menu.value = 1;
        }
        return game.startGame(StageData[parseInt(menu.value)]);
      }
    };
    document.getElementById('soundbutton').onclick = function() {
      return dao.switchSoundVolume();
    };
    return document.getElementById('musicbutton').onclick = function() {
      return dao.switchMusicVolume();
    };
  };

  StageData = [];

  StageData[1] = "0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0\n0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,5:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0\n4,3,15";

  StageData[2] = "0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0\n0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,5:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,1:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0\n4,3,3";

  StageData[3] = "0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,1,0,1,0,1,0,0,0;0,0,0,1,1,1,1,0,0,0;0,0,1,1,0,0,0,1,0,0;0,0,0,1,1,4,0,0,0,0;0,0,0,0,0,1,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0\n0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,5:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0\n4,3,4";

  StageData[4] = "0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,1,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0\n0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,1:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,5:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,1:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,1:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0\n4,4,4";

  StageData[5] = "0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,1,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0\n0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,1:1,1:1,1:1,0:0,0:0,0:0;0:0,0:0,0:0,0:0,1:1,0:0,1:1,0:0,0:0,0:0;0:0,0:0,0:0,0:0,1:1,1:1,1:1,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,5:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0\n4,5,3";

  StageData[6] = "0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,1,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0\n0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,1:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,2:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,1:0,0:0,0:0,0:0;0:0,1:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,1:0,0:0,0:0,1:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,1:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,1:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,1:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,5:0,1:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,1:0,0:0,0:0,0:0,0:0,0:0\n4,3,2";

  StageData[7] = "0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,1,1,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0\n0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,1:0,1:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,1:0,2:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,1:0,0:0,0:0,1:1,1:1,0:0,0:0,0:0,0:0;0:0,0:0,1:0,0:0,0:0,1:0,0:0,0:0,0:0,0:0;0:0,0:0,1:0,1:0,0:0,1:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,5:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,1:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0\n5,6,3";

  StageData[8] = "0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,6,0;0,0,0,0,0,0,0,6,5,0;0,0,0,0,0,0,0,6,0,0;0,0,0,0,0,0,0,7,7,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0\n0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,5:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0\n1,8,3";

  StageData[9] = "0,6,0,0,0,0,6,0,0,0;0,7,0,0,0,6,0,0,0,0;0,0,0,0,6,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,4,0,5,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0\n0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;1:0,1:0,3:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;5:0,1:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;4:0,1:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,1:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,1:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0\n8,0,5";

  StageData[10] = "0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0\n0:0,1:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,1:0,0:0;0:0,0:0,0:0,0:0,0:0,5:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,1:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,1:0,0:0,0:0;0:0,0:0,0:0,1:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,1:0,0:0,0:0,0:0,1:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;1:0,0:0,0:0,0:0,0:0,0:0,1:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,1:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,1:0,0:0,0:0;0:0,0:0,0:0,0:0,1:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,1:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,1:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0\n9,3,5";

  StageData[11] = "0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;7,0,0,0,0,0,0,3,0,5;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0\n0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,1:0,1:0,1:0,1:0,1:0,1:0,1:0,0:0,0:0;0:0,1:0,0:0,0:0,0:0,0:0,0:0,1:0,0:0,0:0;0:0,1:0,0:0,1:0,1:0,1:0,3:0,1:0,0:0,0:0;0:0,1:0,0:0,1:0,0:0,1:0,0:0,1:0,0:0,0:0;1:0,1:0,0:0,1:0,1:0,1:0,0:0,1:0,1:0,1:0;0:0,0:0,0:0,0:0,1:1,0:0,0:0,0:0,2:0,0:0;1:0,1:0,1:0,0:0,1:0,0:0,1:0,1:0,1:0,1:0;0:0,0:0,1:0,4:0,1:0,0:0,1:0,0:0,0:0,0:0;0:0,0:0,1:0,5:0,1:0,0:0,1:0,0:0,0:0,0:0;0:0,0:0,1:0,1:0,1:0,1:0,1:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0\n10,5,4";

  StageData[12] = "0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;6,0,0,1,0,0,0,0,6,0;0,0,0,0,0,0,0,0,0,0;0,0,6,0,1,0,0,0,0,0;0,0,0,0,0,1,0,0,0,0;0,0,7,0,0,0,0,0,0,0;0,0,0,0,0,5,4,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0\n0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,1:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,2:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,1:0,0:0,1:0,0:0,1:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,1:0,0:0,0:0;0:0,1:0,3:0,1:0,5:0,4:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,1:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0\n2,3,3";

  StageData[13] = "0,7,0,0,1,0,6,0,0,0;6,0,0,0,1,6,0,0,0,0;0,0,0,0,1,0,0,0,0,0;0,0,0,0,1,0,0,0,0,0;7,0,0,1,1,1,0,0,6,0;0,6,0,0,1,0,0,0,0,5;0,1,0,1,1,1,0,1,6,0;1,1,1,1,0,1,1,1,1,1;0,1,0,1,1,1,0,1,0,4;0,0,0,0,1,0,0,0,0,0;0,0,0,1,1,1,0,5,0,0;0,7,0,0,1,0,0,0,0,0;0,0,0,0,1,0,0,0,0,0;0,0,0,6,1,0,0,5,0,0;4,0,0,0,0,0,5,0,0,0\n0:0,0:0,0:0,0:0,0:0,0:0,0:0,1:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,1:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;1:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,5:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,1:0,0:0;0:0,0:0,1:0,0:0,0:0,1:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0\n0,0,6";

  StageData[14] = "0,1,1,1,0,1,1,1,1,0;0,1,1,4,1,1,1,1,1,0;0,1,1,1,0,1,1,1,1,0;0,1,1,1,0,0,0,1,0,0;1,1,1,1,0,0,0,0,0,0;0,1,4,1,0,0,0,0,0,0;0,0,0,0,0,3,0,0,0,0;0,1,0,0,0,0,0,0,0,1;0,0,0,0,0,0,0,0,0,1;0,0,0,0,0,0,0,1,0,1;0,0,0,0,0,0,0,1,0,1;0,0,0,0,0,0,0,1,0,1;0,0,0,0,0,0,0,1,0,1;0,0,1,1,1,1,1,1,0,1;0,0,0,0,0,0,0,0,0,0\n1:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,1:0;1:0,1:1,0:0,0:0,0:0,0:0,0:0,1:0,2:0,0:0;1:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,1:1,0:0;0:0,0:0,0:0,0:0,1:0,1:0,0:0,0:0,3:0,1:0;0:0,1:1,0:0,0:0,1:0,0:0,0:0,1:0,0:0,0:0;1:0,1:1,0:0,5:1,1:0,0:0,1:0,0:0,1:0,0:0;1:0,0:0,1:0,1:1,0:0,2:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,1:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,1:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,1:1,0:0,0:0,2:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,4:0,0:0;0:0,1:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;1:0,0:0,2:0,0:0,0:0,0:0,0:0,0:0,1:1,0:0;0:0,0:0,0:0,0:0,0:0,0:0,1:0,0:0,0:0,0:0\n3,3,3";

  StageData[15] = "0,0,0,0,0,0,0,2,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;7,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0\n0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,5:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,1:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,6:0;0:0,0:0,0:0,0:0,0:0,0:0,1:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,6:0,0:0,0:0,1:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0\n10,6,5";

  StageData[16] = "0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0\n0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,1:0,5:0;1:0,0:0,1:0,0:0,1:0,0:0,1:0,0:0,1:0,4:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,1:0,0:0,1:0,0:0,1:0,0:0,1:0,0:0,1:0;2:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;1:0,0:0,1:0,0:0,1:0,0:0,1:0,0:0,1:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,1:0,0:0,1:0,0:0,1:0,0:0,1:0,0:0,1:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,2:0,0:0;1:0,0:0,1:0,0:0,1:0,3:0,1:0,0:0,1:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;3:0,1:0,0:0,1:0,0:0,1:0,0:0,1:0,0:0,1:0;0:0,0:0,0:0,0:0,0:0,0:0,2:0,0:0,0:0,0:0;1:0,0:0,1:0,0:0,1:0,0:0,1:0,0:0,1:0,0:0;2:0,0:0,0:0,0:0,0:0,0:0,0:0,2:0,4:0,0:0\n0,1,3";

  StageData[17] = "0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,4,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0\n0:0,0:0,0:0,2:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,4:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,4:0,4:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,5:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,3:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,4:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0\n12,4,3";

  StageData[18] = "1,0,0,0,0,0,0,0,0,0;1,0,0,0,0,5,0,0,0,0;1,7,0,0,0,0,0,0,0,0;0,0,7,0,0,0,0,0,0,0;0,0,0,6,0,0,0,0,0,0;0,0,0,0,0,0,0,0,5,0;0,7,0,0,0,0,0,0,4,0;0,4,0,0,0,0,0,0,0,0;0,7,6,5,0,0,0,0,0,0;0,6,5,4,0,0,0,0,0,0;0,0,0,1,0,0,5,0,0,0;1,1,1,0,0,0,0,0,0,0;1,1,1,1,0,0,0,6,0,0;1,1,1,7,0,0,0,0,0,0;1,1,0,1,0,4,4,0,0,0\n0:0,1:1,1:1,0:0,0:0,0:0,0:0,0:0,0:0,2:0;2:1,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;1:1,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,1:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,1:1,0:0,0:0,3:1,0:0,0:0;1:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,1:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,4:0,1:1,0:0,0:0,0:0,0:0,0:0,1:0,0:0;0:0,1:0,0:0,4:0,1:0,0:0,1:0,0:0,0:0,0:0;5:0,4:0,0:0,0:0,1:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,1:1,0:0,1:1,1:1,1:1,0:0,2:1;0:0,0:0,0:0,3:0,0:0,0:0,0:0,0:0,3:1,0:0\n13,0,6";

  StageData[19] = "7,0,0,0,0,0,0,0,0,6;6,0,0,0,0,0,0,0,0,0;6,0,0,0,6,0,0,0,0,0;0,0,6,0,0,5,0,0,0,0;0,0,0,6,0,0,0,0,0,0;0,0,0,0,6,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,6,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,5;0,0,4,4,4,4,4,4,4,0;0,0,4,4,4,4,4,4,4,0;0,0,0,0,0,0,0,0,0,5;0,0,0,0,0,0,0,0,0,0;0,2,2,2,2,2,2,2,2,0\n0:0,1:1,1:1,1:1,1:1,1:1,1:1,1:1,0:0,0:0;0:0,0:0,0:0,1:1,1:1,1:1,1:1,1:1,1:1,0:0;0:0,1:1,0:0,0:0,0:0,0:0,1:1,1:1,1:1,0:0;0:0,1:1,0:0,0:0,0:0,0:0,1:1,1:1,1:1,0:0;0:0,1:1,1:1,0:0,0:0,0:0,1:1,0:0,1:1,0:0;0:0,1:0,1:1,0:0,0:0,0:0,1:1,0:0,1:1,0:0;0:0,1:0,0:0,1:1,1:1,0:0,1:1,0:0,1:1,0:0;0:0,1:0,0:0,1:1,0:0,0:0,0:0,0:0,1:1,0:0;0:0,1:0,0:0,0:0,1:1,1:1,1:1,1:1,0:0,0:0;0:0,1:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,1:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,1:0,3:1,3:1,3:1,3:1,3:1,3:1,3:1,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;3:1,1:0,1:0,1:0,1:0,1:0,1:0,1:0,1:0,1:0;1:1,4:0,4:0,4:0,4:0,4:0,4:0,4:0,4:0,5:0\n1,0,459";

  StageData[20] = "0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,4,0,0;0,0,0,0,0,0,0,0,0,0\n0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,1:0,1:0,1:0,1:0,1:0,0:0,0:0;0:0,0:0,0:0,1:0,0:0,1:0,0:0,1:0,0:0,0:0;0:0,0:0,0:0,1:0,1:0,1:0,0:0,1:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,1:0,1:0,1:0,1:0,1:0,0:0,0:0;0:0,0:0,0:0,1:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,1:0,1:0,1:0,1:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,0:0,0:0,0:0,1:0,1:0,1:0,1:0,0:0,0:0;0:0,0:0,0:0,0:0,1:0,0:0,0:0,1:0,0:0,0:0;0:0,1:0,1:0,1:0,1:0,1:0,1:0,1:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0;0:0,1:0,1:0,1:0,1:0,1:0,0:0,5:0,0:0,0:0;0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0,0:0\n7,3,100";

  compressStageData = function(stageData) {
    var i, result, str, str1, _i;
    str = stageData.split(/\r\n|\r|\n/);
    str1 = replaceAll(str[0] + str[1], /\r\n|\r|\n|;|,|:/);
    result = '';
    for (i = _i = 0; _i < 30; i = ++_i) {
      result += compressNumber(str1.substr(i * 15, 15));
      result += '_';
    }
    result += str[2];
    return result;
  };

  restoreStageData = function(str) {
    var i, midStr, result, strAry, x, y, _i, _j, _k, _l;
    strAry = str.split('_');
    midStr = '';
    for (i = _i = 0; _i < 30; i = ++_i) {
      midStr += parseNumberFrom(strAry[i]);
    }
    midStr += strAry[30];
    result = '';
    for (i = _j = 0; _j < 15; i = ++_j) {
      result += midStr.substr(i * 10, 10).split('').join(',');
      result += ';';
    }
    result = result.slice(0, -1);
    result += "\n";
    for (x = _k = 0; _k < 15; x = ++_k) {
      for (y = _l = 0; _l < 10; y = ++_l) {
        result += midStr.substr(150 + (y + (x * 10)) * 2, 1);
        result += ':';
        result += midStr.substr(150 + (y + (x * 10)) * 2 + 1, 1);
        result += ',';
      }
      result = result.slice(0, -1);
      result += ';';
    }
    result = result.slice(0, -1);
    result += "\n";
    result += midStr.substr(450, midStr.length - 450);
    return result;
  };

  compressNumber = function(str) {
    var num, result;
    result = '';
    num = parseInt(str, 10);
    while (true) {
      result = (parseNumberTo(num % 36)).concat(result);
      num = parseInt(num / 36);
      if (num === 0) {
        break;
      }
    }
    return result;
  };

  parseNumberTo = function(num) {
    var result;
    result = num.toString(36);
    if (result === '0') {
      return result;
    } else {
      return result;
    }
  };

  parseNumberFrom = function(str) {
    if (str === '') {
      str = '000000000000000';
    }
    return ("000000000000000" + parseInt(str, 36)).slice(-15);
  };

  replaceAll = function(str, express) {
    return str.split(express).join("");
  };

  images = [];

  sounds = [];

  initialize = function(stagedata) {
    var canvas, canvasMap, connector, context, dao, ext, game, loadImg, map, musicvol, soundvol;
    loadImg = function(filename) {
      var result;
      result = new Image();
      result.src = filename;
      return result;
    };
    images.hasami = loadImg("img/hasami.png");
    images.hasami_die = loadImg("img/hasami_die.png");
    images.cursor = loadImg("img/editor_cursor.png");
    images.startPoint = loadImg("img/editor_startpoint.png");
    images.floor = [];
    images.floor.push(loadImg("img/floor_plain.png"));
    images.floor.push(loadImg("img/floor_Ice.png"));
    images.floor.push(loadImg("img/floor_net.png"));
    images.floor.push(loadImg("img/floor_step.png"));
    images.floor.push(loadImg("img/floor_arrow_left.png"));
    images.floor.push(loadImg("img/floor_arrow_up.png"));
    images.floor.push(loadImg("img/floor_arrow_right.png"));
    images.floor.push(loadImg("img/floor_arrow_down.png"));
    images.item = [];
    images.item.push(loadImg("img/item_non.png"));
    images.item.push(loadImg("img/item_block.png"));
    images.item.push(loadImg("img/item_energy.png"));
    images.item.push(loadImg("img/item_key.png"));
    images.item.push(loadImg("img/item_gate.png"));
    images.item.push(loadImg("img/item_goal.png"));
    images.item.push(loadImg("img/item_damage.png"));
    images.item_ghost = [];
    images.item_ghost.push(loadImg("img/item_non_ghost.png"));
    images.item_ghost.push(loadImg("img/item_block_ghost.png"));
    images.item_ghost.push(loadImg("img/item_energy_ghost.png"));
    images.item_ghost.push(loadImg("img/item_key_ghost.png"));
    images.item_ghost.push(loadImg("img/item_gate_ghost.png"));
    images.item_ghost.push(loadImg("img/item_goal_ghost.png"));
    images.item_ghost.push(loadImg("img/item_damage_ghost.png"));
    ext = (function() {
      var audio;
      audio = new Audio();
      if (audio.canPlayType("audio/mp3") === 'maybe') {
        return "mp3";
      } else if (audio.canPlayType("audio/wav") === 'maybe') {
        return "wav";
      } else {
        return "none";
      }
    })();
    try {
      sounds.effect = [];
      sounds.effect.push(new Audio('sounds/01Walk.' + ext));
      sounds.effect.push(new Audio('sounds/02Dash.' + ext));
      sounds.effect.push(new Audio('sounds/03Ice.' + ext));
      sounds.effect.push(new Audio('sounds/04Charge.' + ext));
      sounds.effect.push(new Audio('sounds/05Key.' + ext));
      sounds.effect.push(new Audio('sounds/06Gate.' + ext));
      sounds.effect.push(new Audio('sounds/07Miss.' + ext));
      sounds.effect.push(new Audio('sounds/08Arrow.' + ext));
      sounds.music = [];
      sounds.music.push(new Audio('sounds/01.' + ext));
      sounds.music.push(new Audio('sounds/02Clear.' + ext));
      sounds.music[0].loop = true;
    } catch (error) {

    }
    canvas = document.getElementById('canvassample');
    context = canvas.getContext('2d');
    connector = new TreeConnector();
    canvasMap = new CanvasMap(connector, context);
    game = new Game(connector.createChild());
    dao = [];
    dao.hydeTextArea = function() {
      return document.getElementById('editArea').style.display = "none";
    };
    dao.displayTextArea = function() {
      return document.getElementById('editArea').style.display = "block";
    };
    dao.getStageData = function() {
      return document.getElementById('stgdatatextarea').value;
    };
    dao.hydeTextArea();
    soundvol = 1;
    dao.switchMusicVolume = function() {
      var changevolume;
      soundvol = 1 - soundvol;
      changevolume = function(value) {
        return value.volume = soundvol;
      };
      return map(sounds.effect, changevolume);
    };
    musicvol = 1;
    dao.switchSoundVolume = function() {
      var changevolume;
      musicvol = 1 - musicvol;
      changevolume = function(value) {
        return value.volume = musicvol;
      };
      return map(sounds.music, changevolume);
    };
    map = function(arr, func) {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = arr.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(func(arr[i]));
      }
      return _results;
    };
    setMenuModeControl(game, dao, connector);
    connector.addEvent("output stagedata", function(str) {
      return document.getElementById('stgdatatextarea').value = str;
    });
    connector.addEvent("output stageurl", function(str) {
      var url;
      url = location.href.split('?')[0] + '?' + compressStageData(str);
      return document.getElementById('stgdatatextarea').value = url;
    });
    if (stagedata !== '') {
      dao.hydeTextArea();
      setPlayodeControl(game);
      if (menu.value === "") {
        menu.value = 1;
      }
      return game.startGame(restoreStageData(stagedata));
    }
  };

  CanvasMap = (function() {

    function CanvasMap(connector, context) {
      var direction, draw, drawPlayer, energydisp, f_count, getItemImage, getPlayerImageIndex, play, stop;
      energydisp = document.getElementById('energydisp');
      draw = function(img, pt) {
        return context.drawImage(img, Const.CellSize * pt.x, Const.CellSize * pt.y);
      };
      drawPlayer = function(player) {
        var index;
        index = getPlayerImageIndex(player);
        return context.drawImage(images.hasami, index.x * Const.CellSize, index.y * Const.CellSize, Const.CellSize, Const.CellSize, Const.CellSize * player.point.x, Const.CellSize * player.point.y, Const.CellSize, Const.CellSize);
      };
      f_count = 0;
      direction = 0;
      getPlayerImageIndex = function(player) {
        var index;
        f_count++;
        index = [];
        if (player.energy <= 0 && !player.clear) {
          index.y = 1;
        } else if (player.clear) {
          index.y = 2;
        } else {
          index.y = 0;
        }
        index.x = parseInt(f_count / 10) % 2;
        if (player.direction === Const.Direction.Right) {
          direction = 0;
        }
        if (player.direction === Const.Direction.Left) {
          direction = 3;
        }
        index.y += direction;
        return index;
      };
      play = function(audio) {
        try {
          stop(audio);
          return audio.play();
        } catch (error) {

        }
      };
      stop = function(audio) {
        try {
          if (!audio.ended) {
            audio.pause();
            return audio.currentTime = 0;
          }
        } catch (error) {

        }
      };
      getItemImage = function(cell) {
        if (cell.item.ghost) {
          return images.item_ghost[cell.item.itemType];
        } else {
          return images.item[cell.item.itemType];
        }
      };
      connector.addEvent("create cell", function(cell) {
        draw(images.floor[cell.floor.floorType], cell.point);
        return draw(getItemImage(cell), cell.point);
      });
      connector.addEvent("update cell", function(cell, startpoint) {
        draw(images.floor[cell.floor.floorType], cell.point);
        draw(getItemImage(cell), cell.point);
        draw(images.startPoint, startpoint);
        return draw(images.cursor, cell.point);
      });
      connector.addEvent("cursor move", function(cellfrom, cellto, startpoint) {
        draw(images.floor[cellfrom.floor.floorType], cellfrom.point);
        draw(getItemImage(cellfrom), cellfrom.point);
        draw(images.startPoint, startpoint);
        return draw(images.cursor, cellto.point);
      });
      connector.addEvent("change startpoint", function(cellfrom, cellto) {
        draw(images.floor[cellfrom.floor.floorType], cellfrom.point);
        draw(getItemImage(cellfrom), cellfrom.point);
        draw(images.startPoint, cellto.point);
        return draw(images.cursor, cellto.point);
      });
      connector.addEvent("set startpoint", function(startpoint, energy) {
        draw(images.startPoint, startpoint);
        return energydisp.value = energy;
      });
      connector.addEvent("player move", function(cellfrom, cellto, player) {
        draw(images.floor[cellfrom.floor.floorType], cellfrom.point);
        draw(getItemImage(cellfrom), cellfrom.point);
        drawPlayer(player);
        return energydisp.value = player.energy;
      });
      connector.addEvent("stage clear", function() {
        stop(sounds.music[Const.Sounds.Music.Stage]);
        return play(sounds.music[Const.Sounds.Music.Clear]);
      });
      connector.addEvent("game over", function(cell, player) {
        draw(images.floor[cell.floor.floorType], cell.point);
        draw(getItemImage(cell), cell.point);
        drawPlayer(player);
        return sounds.effect[Const.Sounds.Effect.Miss].play();
      });
      connector.addEvent("wait", function(cell, player) {
        draw(images.floor[cell.floor.floorType], cell.point);
        draw(getItemImage(cell), cell.point);
        return drawPlayer(player);
      });
      connector.addEvent("player walk", function() {
        return play(sounds.effect[Const.Sounds.Effect.Walk]);
      });
      connector.addEvent("player dash", function() {
        return play(sounds.effect[Const.Sounds.Effect.Dash]);
      });
      connector.addEvent("player slip", function() {
        return play(sounds.effect[Const.Sounds.Effect.Ice]);
      });
      connector.addEvent("arrow", function() {
        return play(sounds.effect[Const.Sounds.Effect.Arrow]);
      });
      connector.addEvent("key", function() {
        return play(sounds.effect[Const.Sounds.Effect.Key]);
      });
      connector.addEvent("gate", function() {
        return play(sounds.effect[Const.Sounds.Effect.Gate]);
      });
      connector.addEvent("energy", function() {
        return play(sounds.effect[Const.Sounds.Effect.Charge]);
      });
      connector.addEvent("start stage", function() {
        return play(sounds.music[Const.Sounds.Music.Stage]);
      });
    }

    return CanvasMap;

  })();

  window.onload = function() {
    if ((navigator.userAgent.indexOf('iPhone') > 0 && navigator.userAgent.indexOf('iPad') === -1) || navigator.userAgent.indexOf('iPod') > 0 || navigator.userAgent.indexOf('Android') > 0) {

    } else {

    }
    return initialize(location.search.replace('?', ''));
  };

}).call(this);
